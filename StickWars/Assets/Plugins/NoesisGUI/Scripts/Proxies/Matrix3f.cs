/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Matrix3f : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Matrix3f(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Matrix3f obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Matrix3f() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Matrix3f(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Matrix3f() : this(NoesisGUI_PINVOKE.new_Matrix3f__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Matrix3f(float v00, float v01, float v02, float v10, float v11, float v12, float v20, float v21, float v22) : this(NoesisGUI_PINVOKE.new_Matrix3f__SWIG_1(v00, v01, v02, v10, v11, v12, v20, v21, v22), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }





  public Matrix3f(Transform2f transform) : this(NoesisGUI_PINVOKE.new_Matrix3f__SWIG_4(Transform2f.getCPtr(transform)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Matrix3f(Matrix3f m) : this(NoesisGUI_PINVOKE.new_Matrix3f__SWIG_5(Matrix3f.getCPtr(m)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public static Matrix3f Identity() {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_Identity(), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Matrix3f Scale(float scaleX, float scaleY, float scaleZ) {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_Scale(scaleX, scaleY, scaleZ), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Matrix3f RotX(float radians) {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_RotX(radians), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Matrix3f RotY(float radians) {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_RotY(radians), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Matrix3f RotZ(float radians) {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_RotZ(radians), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Matrix3f EulerZXY(float x, float y, float z) {
    Matrix3f ret = new Matrix3f(NoesisGUI_PINVOKE.Matrix3f_EulerZXY(x, y, z), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

