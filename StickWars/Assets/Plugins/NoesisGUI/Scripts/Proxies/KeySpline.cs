/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class KeySpline : Freezable {
  private HandleRef swigCPtr;

  public KeySpline(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.KeySpline_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(KeySpline obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~KeySpline() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_KeySpline(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public KeySpline() : this(NoesisGUI_PINVOKE.new_KeySpline__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public KeySpline(Point controlPoint1, Point controlPoint2) : this(NoesisGUI_PINVOKE.new_KeySpline__SWIG_1(Point.getCPtr(controlPoint1), Point.getCPtr(controlPoint2)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public KeySpline(float controlPoint1X, float controlPoint1Y, float controlPoint2X, float controlPoint2Y) : this(NoesisGUI_PINVOKE.new_KeySpline__SWIG_2(controlPoint1X, controlPoint1Y, controlPoint2X, controlPoint2Y), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Point GetControlPoint1() {
    Point ret = new Point(NoesisGUI_PINVOKE.KeySpline_GetControlPoint1(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetControlPoint1(Point point) {
    NoesisGUI_PINVOKE.KeySpline_SetControlPoint1(swigCPtr, Point.getCPtr(point));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Point GetControlPoint2() {
    Point ret = new Point(NoesisGUI_PINVOKE.KeySpline_GetControlPoint2(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetControlPoint2(Point point) {
    NoesisGUI_PINVOKE.KeySpline_SetControlPoint2(swigCPtr, Point.getCPtr(point));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetSplineProgress(float linearProgress) {
    float ret = NoesisGUI_PINVOKE.KeySpline_GetSplineProgress(swigCPtr, linearProgress);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }





  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_KeySpline(valPtr);
  }

}

}

