/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Storyboard : ParallelTimeline {
  private HandleRef swigCPtr;

  public Storyboard(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Storyboard_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Storyboard obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Storyboard() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Storyboard(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Storyboard() : this(NoesisGUI_PINVOKE.new_Storyboard__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Storyboard(bool createChildrenCollection) : this(NoesisGUI_PINVOKE.new_Storyboard__SWIG_1(createChildrenCollection), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static string GetTargetName(DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_GetTargetName(DependencyObject.getCPtr(element));
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public static void SetTargetName(DependencyObject element, string name) {
    NoesisGUI_PINVOKE.Storyboard_SetTargetName(DependencyObject.getCPtr(element), Marshal.StringToHGlobalAnsi(name));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static PropertyPath GetTargetProperty(DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_GetTargetProperty(DependencyObject.getCPtr(element));
    PropertyPath ret = (cPtr == IntPtr.Zero) ? null : new PropertyPath(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetTargetProperty(DependencyObject element, PropertyPath path) {
    NoesisGUI_PINVOKE.Storyboard_SetTargetProperty(DependencyObject.getCPtr(element), PropertyPath.getCPtr(path));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyObject GetTarget(DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_GetTarget(DependencyObject.getCPtr(element));
    DependencyObject ret = (cPtr == IntPtr.Zero) ? null : new DependencyObject(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetTarget(DependencyObject element, DependencyObject target) {
    NoesisGUI_PINVOKE.Storyboard_SetTarget(DependencyObject.getCPtr(element), DependencyObject.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public void Begin(FrameworkElement target, FrameworkElement nameScope, bool isControllable) {
    NoesisGUI_PINVOKE.Storyboard_Begin__SWIG_1(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), isControllable);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Begin(FrameworkElement target, FrameworkElement nameScope) {
    NoesisGUI_PINVOKE.Storyboard_Begin__SWIG_2(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Begin(FrameworkElement target) {
    NoesisGUI_PINVOKE.Storyboard_Begin__SWIG_3(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Pause(FrameworkElement target) {
    NoesisGUI_PINVOKE.Storyboard_Pause(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Resume(FrameworkElement target) {
    NoesisGUI_PINVOKE.Storyboard_Resume(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Stop(FrameworkElement target) {
    NoesisGUI_PINVOKE.Storyboard_Stop(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Remove(FrameworkElement target) {
    NoesisGUI_PINVOKE.Storyboard_Remove(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsPlaying(FrameworkElement target) {
    bool ret = NoesisGUI_PINVOKE.Storyboard_IsPlaying(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsPaused(FrameworkElement target) {
    bool ret = NoesisGUI_PINVOKE.Storyboard_IsPaused(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }



  public static DependencyProperty TargetNameProperty {
    set {
      NoesisGUI_PINVOKE.Storyboard_TargetNameProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_TargetNameProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty TargetProperty {
    set {
      NoesisGUI_PINVOKE.Storyboard_TargetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_TargetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty TargetPropertyProperty {
    set {
      NoesisGUI_PINVOKE.Storyboard_TargetPropertyProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Storyboard_TargetPropertyProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Storyboard(valPtr);
  }

}

}

