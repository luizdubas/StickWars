/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public partial class FrameworkElement : UIElement {
  private HandleRef swigCPtr;

  public FrameworkElement(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.FrameworkElement_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(FrameworkElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FrameworkElement() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_FrameworkElement(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void ContextMenuClosingDelegate(BaseComponent arg0,   ContextMenuEventArgs arg1);
  public event ContextMenuClosingDelegate ContextMenuClosing
  {
    add
    {
      lock (this)
      {
        if (!_ContextMenuClosing.ContainsKey(swigCPtr.Handle))
        {
          _ContextMenuClosing.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ContextMenuClosing(RaiseContextMenuClosing, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _ContextMenuClosing[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_ContextMenuClosing.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _ContextMenuClosing[swigCPtr.Handle] -= value;

        if (_ContextMenuClosing[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ContextMenuClosing(RaiseContextMenuClosing, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ContextMenuClosing.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseContextMenuClosing(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseContextMenuClosing))]
  private static void RaiseContextMenuClosing(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_ContextMenuClosing.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_ContextMenuClosing[cPtr] != null)
    {
      _ContextMenuClosing[cPtr](new BaseComponent(arg0, false), new   ContextMenuEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuClosingDelegate> _ContextMenuClosing =
      new System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuClosingDelegate>();


  public delegate void ContextMenuOpeningDelegate(BaseComponent arg0,   ContextMenuEventArgs arg1);
  public event ContextMenuOpeningDelegate ContextMenuOpening
  {
    add
    {
      lock (this)
      {
        if (!_ContextMenuOpening.ContainsKey(swigCPtr.Handle))
        {
          _ContextMenuOpening.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ContextMenuOpening(RaiseContextMenuOpening, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _ContextMenuOpening[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_ContextMenuOpening.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _ContextMenuOpening[swigCPtr.Handle] -= value;

        if (_ContextMenuOpening[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ContextMenuOpening(RaiseContextMenuOpening, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ContextMenuOpening.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseContextMenuOpening(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseContextMenuOpening))]
  private static void RaiseContextMenuOpening(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_ContextMenuOpening.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_ContextMenuOpening[cPtr] != null)
    {
      _ContextMenuOpening[cPtr](new BaseComponent(arg0, false), new   ContextMenuEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuOpeningDelegate> _ContextMenuOpening =
      new System.Collections.Generic.Dictionary<System.IntPtr, ContextMenuOpeningDelegate>();


  public delegate void DataContextChangedDelegate(BaseComponent arg0,      DependencyPropertyChangedEventArgs arg1);
  public event DataContextChangedDelegate DataContextChanged
  {
    add
    {
      lock (this)
      {
        if (!_DataContextChanged.ContainsKey(swigCPtr.Handle))
        {
          _DataContextChanged.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_DataContextChanged(RaiseDataContextChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DataContextChanged[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DataContextChanged.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DataContextChanged[swigCPtr.Handle] -= value;

        if (_DataContextChanged[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_DataContextChanged(RaiseDataContextChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DataContextChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDataContextChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDataContextChanged))]
  private static void RaiseDataContextChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DataContextChanged.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DataContextChanged[cPtr] != null)
    {
      _DataContextChanged[cPtr](new BaseComponent(arg0, false), new      DependencyPropertyChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DataContextChangedDelegate> _DataContextChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, DataContextChangedDelegate>();


  public delegate void LoadedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event LoadedDelegate Loaded
  {
    add
    {
      lock (this)
      {
        if (!_Loaded.ContainsKey(swigCPtr.Handle))
        {
          _Loaded.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_Loaded(RaiseLoaded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Loaded[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Loaded.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Loaded[swigCPtr.Handle] -= value;

        if (_Loaded[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_Loaded(RaiseLoaded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Loaded.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseLoaded(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseLoaded))]
  private static void RaiseLoaded(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Loaded.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Loaded[cPtr] != null)
    {
      _Loaded[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LoadedDelegate> _Loaded =
      new System.Collections.Generic.Dictionary<System.IntPtr, LoadedDelegate>();


  public delegate void SizeChangedDelegate(BaseComponent arg0,   SizeChangedEventArgs arg1);
  public event SizeChangedDelegate SizeChanged
  {
    add
    {
      lock (this)
      {
        if (!_SizeChanged.ContainsKey(swigCPtr.Handle))
        {
          _SizeChanged.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_SizeChanged(RaiseSizeChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _SizeChanged[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_SizeChanged.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _SizeChanged[swigCPtr.Handle] -= value;

        if (_SizeChanged[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_SizeChanged(RaiseSizeChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SizeChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseSizeChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseSizeChanged))]
  private static void RaiseSizeChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_SizeChanged.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_SizeChanged[cPtr] != null)
    {
      _SizeChanged[cPtr](new BaseComponent(arg0, false), new   SizeChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SizeChangedDelegate> _SizeChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SizeChangedDelegate>();


  public delegate void ToolTipClosingDelegate(BaseComponent arg0,   ToolTipEventArgs arg1);
  public event ToolTipClosingDelegate ToolTipClosing
  {
    add
    {
      lock (this)
      {
        if (!_ToolTipClosing.ContainsKey(swigCPtr.Handle))
        {
          _ToolTipClosing.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ToolTipClosing(RaiseToolTipClosing, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _ToolTipClosing[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_ToolTipClosing.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _ToolTipClosing[swigCPtr.Handle] -= value;

        if (_ToolTipClosing[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ToolTipClosing(RaiseToolTipClosing, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ToolTipClosing.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseToolTipClosing(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseToolTipClosing))]
  private static void RaiseToolTipClosing(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_ToolTipClosing.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_ToolTipClosing[cPtr] != null)
    {
      _ToolTipClosing[cPtr](new BaseComponent(arg0, false), new   ToolTipEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ToolTipClosingDelegate> _ToolTipClosing =
      new System.Collections.Generic.Dictionary<System.IntPtr, ToolTipClosingDelegate>();


  public delegate void ToolTipOpeningDelegate(BaseComponent arg0,   ToolTipEventArgs arg1);
  public event ToolTipOpeningDelegate ToolTipOpening
  {
    add
    {
      lock (this)
      {
        if (!_ToolTipOpening.ContainsKey(swigCPtr.Handle))
        {
          _ToolTipOpening.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_ToolTipOpening(RaiseToolTipOpening, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _ToolTipOpening[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_ToolTipOpening.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _ToolTipOpening[swigCPtr.Handle] -= value;

        if (_ToolTipOpening[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_ToolTipOpening(RaiseToolTipOpening, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _ToolTipOpening.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseToolTipOpening(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseToolTipOpening))]
  private static void RaiseToolTipOpening(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_ToolTipOpening.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_ToolTipOpening[cPtr] != null)
    {
      _ToolTipOpening[cPtr](new BaseComponent(arg0, false), new   ToolTipEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ToolTipOpeningDelegate> _ToolTipOpening =
      new System.Collections.Generic.Dictionary<System.IntPtr, ToolTipOpeningDelegate>();


  public delegate void UnloadedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event UnloadedDelegate Unloaded
  {
    add
    {
      lock (this)
      {
        if (!_Unloaded.ContainsKey(swigCPtr.Handle))
        {
          _Unloaded.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_FrameworkElement_Unloaded(RaiseUnloaded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Unloaded[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Unloaded.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Unloaded[swigCPtr.Handle] -= value;

        if (_Unloaded[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_FrameworkElement_Unloaded(RaiseUnloaded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Unloaded.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseUnloaded(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseUnloaded))]
  private static void RaiseUnloaded(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Unloaded.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Unloaded[cPtr] != null)
    {
      _Unloaded[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, UnloadedDelegate> _Unloaded =
      new System.Collections.Generic.Dictionary<System.IntPtr, UnloadedDelegate>();


  public FrameworkElement() : this(NoesisGUI_PINVOKE.new_FrameworkElement(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetActualHeight() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetActualHeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public float GetActualWidth() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetActualWidth(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public ContextMenu GetContextMenu() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetContextMenu(swigCPtr);
    ContextMenu ret = (cPtr == IntPtr.Zero) ? null : new ContextMenu(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetContextMenu(ContextMenu menu) {
    NoesisGUI_PINVOKE.FrameworkElement_SetContextMenu(swigCPtr, ContextMenu.getCPtr(menu));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetDataContext() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetDataContext(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDataContext(BaseComponent context) {
    NoesisGUI_PINVOKE.FrameworkElement_SetDataContext(swigCPtr, BaseComponent.getCPtr(context));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ResourceKeyType GetDefaultStyleKey() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetDefaultStyleKey(swigCPtr);
    ResourceKeyType ret = (cPtr == IntPtr.Zero) ? null : new ResourceKeyType(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDefaultStyleKey(ResourceKeyType key) {
    NoesisGUI_PINVOKE.FrameworkElement_SetDefaultStyleKey(swigCPtr, ResourceKeyType.getCPtr(key));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Style GetFocusVisualStyle() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetFocusVisualStyle(swigCPtr);
    Style ret = (cPtr == IntPtr.Zero) ? null : new Style(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFocusVisualStyle(Style style) {
    NoesisGUI_PINVOKE.FrameworkElement_SetFocusVisualStyle(swigCPtr, Style.getCPtr(style));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetHeight() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetHeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetHeight(float height) {
    NoesisGUI_PINVOKE.FrameworkElement_SetHeight(swigCPtr, height);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public HorizontalAlignment GetHorizontalAlignment() {
    HorizontalAlignment ret = (HorizontalAlignment)NoesisGUI_PINVOKE.FrameworkElement_GetHorizontalAlignment(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetHorizontalAlignment(HorizontalAlignment hAlign) {
    NoesisGUI_PINVOKE.FrameworkElement_SetHorizontalAlignment(swigCPtr, (int)hAlign);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public UITransform GetLayoutTransform() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetLayoutTransform(swigCPtr);
    UITransform ret = (cPtr == IntPtr.Zero) ? null : new UITransform(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetLayoutTransform(UITransform transform) {
    NoesisGUI_PINVOKE.FrameworkElement_SetLayoutTransform(swigCPtr, UITransform.getCPtr(transform));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Thickness GetMargin() {
    Thickness ret = new Thickness(NoesisGUI_PINVOKE.FrameworkElement_GetMargin(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetMargin(Thickness margin) {
    NoesisGUI_PINVOKE.FrameworkElement_SetMargin(swigCPtr, Thickness.getCPtr(margin));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetMaxHeight() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetMaxHeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetMaxHeight(float maxHeigth) {
    NoesisGUI_PINVOKE.FrameworkElement_SetMaxHeight(swigCPtr, maxHeigth);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetMaxWidth() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetMaxWidth(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetMaxWidth(float maxWidth) {
    NoesisGUI_PINVOKE.FrameworkElement_SetMaxWidth(swigCPtr, maxWidth);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetMinHeight() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetMinHeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetMinHeight(float minHeight) {
    NoesisGUI_PINVOKE.FrameworkElement_SetMinHeight(swigCPtr, minHeight);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetMinWidth() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetMinWidth(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetMinWidth(float minWidth) {
    NoesisGUI_PINVOKE.FrameworkElement_SetMinWidth(swigCPtr, minWidth);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetName() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetName(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetName(string name) {
    NoesisGUI_PINVOKE.FrameworkElement_SetName(swigCPtr, Marshal.StringToHGlobalAnsi(name));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetOverridesDefaultStyle() {
    bool ret = NoesisGUI_PINVOKE.FrameworkElement_GetOverridesDefaultStyle(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetOverridesDefaultStyle(bool value) {
    NoesisGUI_PINVOKE.FrameworkElement_SetOverridesDefaultStyle(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Style GetStyle() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetStyle(swigCPtr);
    Style ret = (cPtr == IntPtr.Zero) ? null : new Style(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetStyle(Style style) {
    NoesisGUI_PINVOKE.FrameworkElement_SetStyle(swigCPtr, Style.getCPtr(style));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetTag() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetTag(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetTag(BaseComponent tag) {
    NoesisGUI_PINVOKE.FrameworkElement_SetTag__SWIG_0(swigCPtr, BaseComponent.getCPtr(tag));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetTag(string tag) {
    NoesisGUI_PINVOKE.FrameworkElement_SetTag__SWIG_1(swigCPtr, tag);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetToolTip() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetToolTip(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetToolTip(BaseComponent tooltip) {
    NoesisGUI_PINVOKE.FrameworkElement_SetToolTip__SWIG_0(swigCPtr, BaseComponent.getCPtr(tooltip));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetToolTip(string tooltip) {
    NoesisGUI_PINVOKE.FrameworkElement_SetToolTip__SWIG_1(swigCPtr, tooltip);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetUseLayoutRounding() {
    bool ret = NoesisGUI_PINVOKE.FrameworkElement_GetUseLayoutRounding(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetUseLayoutRounding(bool useLayoutRounding) {
    NoesisGUI_PINVOKE.FrameworkElement_SetUseLayoutRounding(swigCPtr, useLayoutRounding);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public VerticalAlignment GetVerticalAlignment() {
    VerticalAlignment ret = (VerticalAlignment)NoesisGUI_PINVOKE.FrameworkElement_GetVerticalAlignment(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetVerticalAlignment(VerticalAlignment vAlign) {
    NoesisGUI_PINVOKE.FrameworkElement_SetVerticalAlignment(swigCPtr, (int)vAlign);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetWidth() {
    float ret = NoesisGUI_PINVOKE.FrameworkElement_GetWidth(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetWidth(float width) {
    NoesisGUI_PINVOKE.FrameworkElement_SetWidth(swigCPtr, width);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public TriggerCollection GetTriggers() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetTriggers(swigCPtr);
    TriggerCollection ret = (cPtr == IntPtr.Zero) ? null : new TriggerCollection(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsLoaded() {
    bool ret = NoesisGUI_PINVOKE.FrameworkElement_IsLoaded(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void BringIntoView() {
    NoesisGUI_PINVOKE.FrameworkElement_BringIntoView__SWIG_0(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void BringIntoView(Rect targetRectangle) {
    NoesisGUI_PINVOKE.FrameworkElement_BringIntoView__SWIG_1(swigCPtr, Rect.getCPtr(targetRectangle));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FrameworkElement GetParent() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetParent(swigCPtr);
    FrameworkElement ret = (cPtr == IntPtr.Zero) ? null : new FrameworkElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public FrameworkElement GetTemplatedParent() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetTemplatedParent(swigCPtr);
    FrameworkElement ret = (cPtr == IntPtr.Zero) ? null : new FrameworkElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseComponent FindName(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FindName(swigCPtr, name);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public ObjectWithNameScope FindNameAndScope(string name) {
    ObjectWithNameScope ret = new ObjectWithNameScope(NoesisGUI_PINVOKE.FrameworkElement_FindNameAndScope(swigCPtr, name), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void RegisterName(string name, BaseComponent arg1) {
    NoesisGUI_PINVOKE.FrameworkElement_RegisterName(swigCPtr, name, BaseComponent.getCPtr(arg1));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UnregisterName(string name) {
    NoesisGUI_PINVOKE.FrameworkElement_UnregisterName(swigCPtr, name);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UpdateName(string name, BaseComponent arg1) {
    NoesisGUI_PINVOKE.FrameworkElement_UpdateName(swigCPtr, name, BaseComponent.getCPtr(arg1));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ResourceDictionary GetResources() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_GetResources(swigCPtr);
    ResourceDictionary ret = (cPtr == IntPtr.Zero) ? null : new ResourceDictionary(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetResources(ResourceDictionary resources) {
    NoesisGUI_PINVOKE.FrameworkElement_SetResources(swigCPtr, ResourceDictionary.getCPtr(resources));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty ActualHeightProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ActualHeightProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ActualHeightProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ActualWidthProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ActualWidthProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ActualWidthProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ContextMenuProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ContextMenuProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ContextMenuProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CursorProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_CursorProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_CursorProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty DataContextProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_DataContextProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DataContextProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty DefaultStyleKeyProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_DefaultStyleKeyProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_DefaultStyleKeyProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FlowDirectionProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_FlowDirectionProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FlowDirectionProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FocusVisualStyleProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_FocusVisualStyleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_FocusVisualStyleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ForceCursorProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ForceCursorProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ForceCursorProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty HeightProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_HeightProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_HeightProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty HorizontalAlignmentProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_HorizontalAlignmentProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_HorizontalAlignmentProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty InputScopeProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_InputScopeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_InputScopeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty LanguageProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_LanguageProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_LanguageProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty LayoutTransformProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_LayoutTransformProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_LayoutTransformProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty MarginProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MarginProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MarginProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty MaxHeightProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MaxHeightProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MaxHeightProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty MaxWidthProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MaxWidthProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MaxWidthProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty MinHeightProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MinHeightProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MinHeightProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty MinWidthProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_MinWidthProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_MinWidthProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty NameProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_NameProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_NameProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty OverridesDefaultStyleProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_OverridesDefaultStyleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_OverridesDefaultStyleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty StyleProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_StyleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_StyleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty TagProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_TagProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_TagProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ToolTipProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_ToolTipProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_ToolTipProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty UseLayoutRoundingProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_UseLayoutRoundingProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_UseLayoutRoundingProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty VerticalAlignmentProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_VerticalAlignmentProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_VerticalAlignmentProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty WidthProperty {
    set {
      NoesisGUI_PINVOKE.FrameworkElement_WidthProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.FrameworkElement_WidthProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_FrameworkElement(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_FrameworkElement(valPtr);
  }

}

}

