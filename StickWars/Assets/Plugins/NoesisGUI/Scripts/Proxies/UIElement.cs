/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class UIElement : Visual {
  private HandleRef swigCPtr;

  public UIElement(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.UIElement_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(UIElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UIElement() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_UIElement(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void DragEnterDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event DragEnterDelegate DragEnter
  {
    add
    {
      lock (this)
      {
        if (!_DragEnter.ContainsKey(swigCPtr.Handle))
        {
          _DragEnter.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_DragEnter(RaiseDragEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragEnter[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragEnter.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragEnter[swigCPtr.Handle] -= value;

        if (_DragEnter[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragEnter(RaiseDragEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragEnter.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragEnter))]
  private static void RaiseDragEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragEnter.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragEnter[cPtr] != null)
    {
      _DragEnter[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragEnterDelegate> _DragEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragEnterDelegate>();


  public delegate void DragLeaveDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event DragLeaveDelegate DragLeave
  {
    add
    {
      lock (this)
      {
        if (!_DragLeave.ContainsKey(swigCPtr.Handle))
        {
          _DragLeave.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_DragLeave(RaiseDragLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragLeave[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragLeave.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragLeave[swigCPtr.Handle] -= value;

        if (_DragLeave[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragLeave(RaiseDragLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragLeave.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragLeave))]
  private static void RaiseDragLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragLeave.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragLeave[cPtr] != null)
    {
      _DragLeave[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragLeaveDelegate> _DragLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragLeaveDelegate>();


  public delegate void DragOverDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event DragOverDelegate DragOver
  {
    add
    {
      lock (this)
      {
        if (!_DragOver.ContainsKey(swigCPtr.Handle))
        {
          _DragOver.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_DragOver(RaiseDragOver, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragOver[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragOver.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragOver[swigCPtr.Handle] -= value;

        if (_DragOver[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragOver(RaiseDragOver, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragOver.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragOver(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragOver))]
  private static void RaiseDragOver(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragOver.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragOver[cPtr] != null)
    {
      _DragOver[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragOverDelegate> _DragOver =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragOverDelegate>();


  public delegate void DropDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event DropDelegate Drop
  {
    add
    {
      lock (this)
      {
        if (!_Drop.ContainsKey(swigCPtr.Handle))
        {
          _Drop.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_Drop(RaiseDrop, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Drop[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Drop.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Drop[swigCPtr.Handle] -= value;

        if (_Drop[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_Drop(RaiseDrop, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Drop.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDrop(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDrop))]
  private static void RaiseDrop(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Drop.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Drop[cPtr] != null)
    {
      _Drop[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DropDelegate> _Drop =
      new System.Collections.Generic.Dictionary<System.IntPtr, DropDelegate>();


  public delegate void GiveFeedbackDelegate(BaseComponent arg0,   GiveFeedbackEventArgs arg1);
  public event GiveFeedbackDelegate GiveFeedback
  {
    add
    {
      lock (this)
      {
        if (!_GiveFeedback.ContainsKey(swigCPtr.Handle))
        {
          _GiveFeedback.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_GiveFeedback(RaiseGiveFeedback, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _GiveFeedback[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_GiveFeedback.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _GiveFeedback[swigCPtr.Handle] -= value;

        if (_GiveFeedback[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_GiveFeedback(RaiseGiveFeedback, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _GiveFeedback.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseGiveFeedback(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseGiveFeedback))]
  private static void RaiseGiveFeedback(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_GiveFeedback.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_GiveFeedback[cPtr] != null)
    {
      _GiveFeedback[cPtr](new BaseComponent(arg0, false), new   GiveFeedbackEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GiveFeedbackDelegate> _GiveFeedback =
      new System.Collections.Generic.Dictionary<System.IntPtr, GiveFeedbackDelegate>();


  public delegate void GotFocusDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event GotFocusDelegate GotFocus
  {
    add
    {
      lock (this)
      {
        if (!_GotFocus.ContainsKey(swigCPtr.Handle))
        {
          _GotFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_GotFocus(RaiseGotFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _GotFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_GotFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _GotFocus[swigCPtr.Handle] -= value;

        if (_GotFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotFocus(RaiseGotFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _GotFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseGotFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseGotFocus))]
  private static void RaiseGotFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_GotFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_GotFocus[cPtr] != null)
    {
      _GotFocus[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotFocusDelegate> _GotFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotFocusDelegate>();


  public delegate void GotKeyboardFocusDelegate(BaseComponent arg0,   KeyboardFocusChangedEventArgs arg1);
  public event GotKeyboardFocusDelegate GotKeyboardFocus
  {
    add
    {
      lock (this)
      {
        if (!_GotKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          _GotKeyboardFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_GotKeyboardFocus(RaiseGotKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _GotKeyboardFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_GotKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _GotKeyboardFocus[swigCPtr.Handle] -= value;

        if (_GotKeyboardFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotKeyboardFocus(RaiseGotKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _GotKeyboardFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseGotKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseGotKeyboardFocus))]
  private static void RaiseGotKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_GotKeyboardFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_GotKeyboardFocus[cPtr] != null)
    {
      _GotKeyboardFocus[cPtr](new BaseComponent(arg0, false), new   KeyboardFocusChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotKeyboardFocusDelegate> _GotKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotKeyboardFocusDelegate>();


  public delegate void GotMouseCaptureDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event GotMouseCaptureDelegate GotMouseCapture
  {
    add
    {
      lock (this)
      {
        if (!_GotMouseCapture.ContainsKey(swigCPtr.Handle))
        {
          _GotMouseCapture.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_GotMouseCapture(RaiseGotMouseCapture, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _GotMouseCapture[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_GotMouseCapture.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _GotMouseCapture[swigCPtr.Handle] -= value;

        if (_GotMouseCapture[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotMouseCapture(RaiseGotMouseCapture, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _GotMouseCapture.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseGotMouseCapture(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseGotMouseCapture))]
  private static void RaiseGotMouseCapture(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_GotMouseCapture.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_GotMouseCapture[cPtr] != null)
    {
      _GotMouseCapture[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotMouseCaptureDelegate> _GotMouseCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotMouseCaptureDelegate>();


  public delegate void KeyDownDelegate(BaseComponent arg0,   KeyEventArgs arg1);
  public event KeyDownDelegate KeyDown
  {
    add
    {
      lock (this)
      {
        if (!_KeyDown.ContainsKey(swigCPtr.Handle))
        {
          _KeyDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_KeyDown(RaiseKeyDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _KeyDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_KeyDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _KeyDown[swigCPtr.Handle] -= value;

        if (_KeyDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_KeyDown(RaiseKeyDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _KeyDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseKeyDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseKeyDown))]
  private static void RaiseKeyDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_KeyDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_KeyDown[cPtr] != null)
    {
      _KeyDown[cPtr](new BaseComponent(arg0, false), new   KeyEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, KeyDownDelegate> _KeyDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, KeyDownDelegate>();


  public delegate void KeyUpDelegate(BaseComponent arg0,   KeyEventArgs arg1);
  public event KeyUpDelegate KeyUp
  {
    add
    {
      lock (this)
      {
        if (!_KeyUp.ContainsKey(swigCPtr.Handle))
        {
          _KeyUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_KeyUp(RaiseKeyUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _KeyUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_KeyUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _KeyUp[swigCPtr.Handle] -= value;

        if (_KeyUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_KeyUp(RaiseKeyUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _KeyUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseKeyUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseKeyUp))]
  private static void RaiseKeyUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_KeyUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_KeyUp[cPtr] != null)
    {
      _KeyUp[cPtr](new BaseComponent(arg0, false), new   KeyEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, KeyUpDelegate> _KeyUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, KeyUpDelegate>();


  public delegate void LostFocusDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event LostFocusDelegate LostFocus
  {
    add
    {
      lock (this)
      {
        if (!_LostFocus.ContainsKey(swigCPtr.Handle))
        {
          _LostFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_LostFocus(RaiseLostFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _LostFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_LostFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _LostFocus[swigCPtr.Handle] -= value;

        if (_LostFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostFocus(RaiseLostFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _LostFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseLostFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseLostFocus))]
  private static void RaiseLostFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_LostFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_LostFocus[cPtr] != null)
    {
      _LostFocus[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostFocusDelegate> _LostFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostFocusDelegate>();


  public delegate void LostKeyboardFocusDelegate(BaseComponent arg0,   KeyboardFocusChangedEventArgs arg1);
  public event LostKeyboardFocusDelegate LostKeyboardFocus
  {
    add
    {
      lock (this)
      {
        if (!_LostKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          _LostKeyboardFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_LostKeyboardFocus(RaiseLostKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _LostKeyboardFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_LostKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _LostKeyboardFocus[swigCPtr.Handle] -= value;

        if (_LostKeyboardFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostKeyboardFocus(RaiseLostKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _LostKeyboardFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseLostKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseLostKeyboardFocus))]
  private static void RaiseLostKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_LostKeyboardFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_LostKeyboardFocus[cPtr] != null)
    {
      _LostKeyboardFocus[cPtr](new BaseComponent(arg0, false), new   KeyboardFocusChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostKeyboardFocusDelegate> _LostKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostKeyboardFocusDelegate>();


  public delegate void LostMouseCaptureDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event LostMouseCaptureDelegate LostMouseCapture
  {
    add
    {
      lock (this)
      {
        if (!_LostMouseCapture.ContainsKey(swigCPtr.Handle))
        {
          _LostMouseCapture.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_LostMouseCapture(RaiseLostMouseCapture, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _LostMouseCapture[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_LostMouseCapture.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _LostMouseCapture[swigCPtr.Handle] -= value;

        if (_LostMouseCapture[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostMouseCapture(RaiseLostMouseCapture, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _LostMouseCapture.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseLostMouseCapture(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseLostMouseCapture))]
  private static void RaiseLostMouseCapture(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_LostMouseCapture.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_LostMouseCapture[cPtr] != null)
    {
      _LostMouseCapture[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostMouseCaptureDelegate> _LostMouseCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostMouseCaptureDelegate>();


  public delegate void MouseDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseDownDelegate MouseDown
  {
    add
    {
      lock (this)
      {
        if (!_MouseDown.ContainsKey(swigCPtr.Handle))
        {
          _MouseDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseDown(RaiseMouseDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseDown[swigCPtr.Handle] -= value;

        if (_MouseDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseDown(RaiseMouseDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseDown))]
  private static void RaiseMouseDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseDown[cPtr] != null)
    {
      _MouseDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseDownDelegate> _MouseDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseDownDelegate>();


  public delegate void MouseEnterDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event MouseEnterDelegate MouseEnter
  {
    add
    {
      lock (this)
      {
        if (!_MouseEnter.ContainsKey(swigCPtr.Handle))
        {
          _MouseEnter.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseEnter(RaiseMouseEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseEnter[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseEnter.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseEnter[swigCPtr.Handle] -= value;

        if (_MouseEnter[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseEnter(RaiseMouseEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseEnter.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseEnter))]
  private static void RaiseMouseEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseEnter.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseEnter[cPtr] != null)
    {
      _MouseEnter[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseEnterDelegate> _MouseEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseEnterDelegate>();


  public delegate void MouseLeaveDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event MouseLeaveDelegate MouseLeave
  {
    add
    {
      lock (this)
      {
        if (!_MouseLeave.ContainsKey(swigCPtr.Handle))
        {
          _MouseLeave.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeave(RaiseMouseLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseLeave[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseLeave.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseLeave[swigCPtr.Handle] -= value;

        if (_MouseLeave[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeave(RaiseMouseLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseLeave.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseLeave))]
  private static void RaiseMouseLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseLeave.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseLeave[cPtr] != null)
    {
      _MouseLeave[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeaveDelegate> _MouseLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeaveDelegate>();


  public delegate void MouseLeftButtonDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseLeftButtonDownDelegate MouseLeftButtonDown
  {
    add
    {
      lock (this)
      {
        if (!_MouseLeftButtonDown.ContainsKey(swigCPtr.Handle))
        {
          _MouseLeftButtonDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeftButtonDown(RaiseMouseLeftButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseLeftButtonDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseLeftButtonDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseLeftButtonDown[swigCPtr.Handle] -= value;

        if (_MouseLeftButtonDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeftButtonDown(RaiseMouseLeftButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseLeftButtonDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseLeftButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseLeftButtonDown))]
  private static void RaiseMouseLeftButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseLeftButtonDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseLeftButtonDown[cPtr] != null)
    {
      _MouseLeftButtonDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonDownDelegate> _MouseLeftButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonDownDelegate>();


  public delegate void MouseLeftButtonUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseLeftButtonUpDelegate MouseLeftButtonUp
  {
    add
    {
      lock (this)
      {
        if (!_MouseLeftButtonUp.ContainsKey(swigCPtr.Handle))
        {
          _MouseLeftButtonUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeftButtonUp(RaiseMouseLeftButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseLeftButtonUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseLeftButtonUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseLeftButtonUp[swigCPtr.Handle] -= value;

        if (_MouseLeftButtonUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeftButtonUp(RaiseMouseLeftButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseLeftButtonUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseLeftButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseLeftButtonUp))]
  private static void RaiseMouseLeftButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseLeftButtonUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseLeftButtonUp[cPtr] != null)
    {
      _MouseLeftButtonUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonUpDelegate> _MouseLeftButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonUpDelegate>();


  public delegate void MouseMoveDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event MouseMoveDelegate MouseMove
  {
    add
    {
      lock (this)
      {
        if (!_MouseMove.ContainsKey(swigCPtr.Handle))
        {
          _MouseMove.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseMove(RaiseMouseMove, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseMove[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseMove.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseMove[swigCPtr.Handle] -= value;

        if (_MouseMove[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseMove(RaiseMouseMove, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseMove.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseMove(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseMove))]
  private static void RaiseMouseMove(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseMove.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseMove[cPtr] != null)
    {
      _MouseMove[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseMoveDelegate> _MouseMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseMoveDelegate>();


  public delegate void MouseRightButtonDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseRightButtonDownDelegate MouseRightButtonDown
  {
    add
    {
      lock (this)
      {
        if (!_MouseRightButtonDown.ContainsKey(swigCPtr.Handle))
        {
          _MouseRightButtonDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseRightButtonDown(RaiseMouseRightButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseRightButtonDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseRightButtonDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseRightButtonDown[swigCPtr.Handle] -= value;

        if (_MouseRightButtonDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseRightButtonDown(RaiseMouseRightButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseRightButtonDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseRightButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseRightButtonDown))]
  private static void RaiseMouseRightButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseRightButtonDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseRightButtonDown[cPtr] != null)
    {
      _MouseRightButtonDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonDownDelegate> _MouseRightButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonDownDelegate>();


  public delegate void MouseRightButtonUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseRightButtonUpDelegate MouseRightButtonUp
  {
    add
    {
      lock (this)
      {
        if (!_MouseRightButtonUp.ContainsKey(swigCPtr.Handle))
        {
          _MouseRightButtonUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseRightButtonUp(RaiseMouseRightButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseRightButtonUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseRightButtonUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseRightButtonUp[swigCPtr.Handle] -= value;

        if (_MouseRightButtonUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseRightButtonUp(RaiseMouseRightButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseRightButtonUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseRightButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseRightButtonUp))]
  private static void RaiseMouseRightButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseRightButtonUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseRightButtonUp[cPtr] != null)
    {
      _MouseRightButtonUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonUpDelegate> _MouseRightButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonUpDelegate>();


  public delegate void MouseUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseUpDelegate MouseUp
  {
    add
    {
      lock (this)
      {
        if (!_MouseUp.ContainsKey(swigCPtr.Handle))
        {
          _MouseUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseUp(RaiseMouseUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseUp[swigCPtr.Handle] -= value;

        if (_MouseUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseUp(RaiseMouseUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseUp))]
  private static void RaiseMouseUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseUp[cPtr] != null)
    {
      _MouseUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseUpDelegate> _MouseUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseUpDelegate>();


  public delegate void MouseWheelDelegate(BaseComponent arg0,   MouseWheelEventArgs arg1);
  public event MouseWheelDelegate MouseWheel
  {
    add
    {
      lock (this)
      {
        if (!_MouseWheel.ContainsKey(swigCPtr.Handle))
        {
          _MouseWheel.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_MouseWheel(RaiseMouseWheel, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseWheel[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseWheel.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseWheel[swigCPtr.Handle] -= value;

        if (_MouseWheel[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseWheel(RaiseMouseWheel, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseWheel.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseWheel(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseWheel))]
  private static void RaiseMouseWheel(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseWheel.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseWheel[cPtr] != null)
    {
      _MouseWheel[cPtr](new BaseComponent(arg0, false), new   MouseWheelEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseWheelDelegate> _MouseWheel =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseWheelDelegate>();


  public delegate void PreviewDragEnterDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event PreviewDragEnterDelegate PreviewDragEnter
  {
    add
    {
      lock (this)
      {
        if (!_PreviewDragEnter.ContainsKey(swigCPtr.Handle))
        {
          _PreviewDragEnter.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragEnter(RaisePreviewDragEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewDragEnter[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewDragEnter.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewDragEnter[swigCPtr.Handle] -= value;

        if (_PreviewDragEnter[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragEnter(RaisePreviewDragEnter, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewDragEnter.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewDragEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewDragEnter))]
  private static void RaisePreviewDragEnter(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewDragEnter.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewDragEnter[cPtr] != null)
    {
      _PreviewDragEnter[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragEnterDelegate> _PreviewDragEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragEnterDelegate>();


  public delegate void PreviewDragLeaveDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event PreviewDragLeaveDelegate PreviewDragLeave
  {
    add
    {
      lock (this)
      {
        if (!_PreviewDragLeave.ContainsKey(swigCPtr.Handle))
        {
          _PreviewDragLeave.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragLeave(RaisePreviewDragLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewDragLeave[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewDragLeave.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewDragLeave[swigCPtr.Handle] -= value;

        if (_PreviewDragLeave[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragLeave(RaisePreviewDragLeave, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewDragLeave.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewDragLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewDragLeave))]
  private static void RaisePreviewDragLeave(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewDragLeave.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewDragLeave[cPtr] != null)
    {
      _PreviewDragLeave[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragLeaveDelegate> _PreviewDragLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragLeaveDelegate>();


  public delegate void PreviewDragOverDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event PreviewDragOverDelegate PreviewDragOver
  {
    add
    {
      lock (this)
      {
        if (!_PreviewDragOver.ContainsKey(swigCPtr.Handle))
        {
          _PreviewDragOver.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragOver(RaisePreviewDragOver, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewDragOver[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewDragOver.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewDragOver[swigCPtr.Handle] -= value;

        if (_PreviewDragOver[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragOver(RaisePreviewDragOver, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewDragOver.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewDragOver(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewDragOver))]
  private static void RaisePreviewDragOver(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewDragOver.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewDragOver[cPtr] != null)
    {
      _PreviewDragOver[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragOverDelegate> _PreviewDragOver =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragOverDelegate>();


  public delegate void PreviewDropDelegate(BaseComponent arg0,   DragEventArgs arg1);
  public event PreviewDropDelegate PreviewDrop
  {
    add
    {
      lock (this)
      {
        if (!_PreviewDrop.ContainsKey(swigCPtr.Handle))
        {
          _PreviewDrop.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDrop(RaisePreviewDrop, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewDrop[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewDrop.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewDrop[swigCPtr.Handle] -= value;

        if (_PreviewDrop[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDrop(RaisePreviewDrop, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewDrop.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewDrop(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewDrop))]
  private static void RaisePreviewDrop(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewDrop.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewDrop[cPtr] != null)
    {
      _PreviewDrop[cPtr](new BaseComponent(arg0, false), new   DragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDropDelegate> _PreviewDrop =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDropDelegate>();


  public delegate void PreviewGiveFeedbackDelegate(BaseComponent arg0,   GiveFeedbackEventArgs arg1);
  public event PreviewGiveFeedbackDelegate PreviewGiveFeedback
  {
    add
    {
      lock (this)
      {
        if (!_PreviewGiveFeedback.ContainsKey(swigCPtr.Handle))
        {
          _PreviewGiveFeedback.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewGiveFeedback(RaisePreviewGiveFeedback, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewGiveFeedback[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewGiveFeedback.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewGiveFeedback[swigCPtr.Handle] -= value;

        if (_PreviewGiveFeedback[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewGiveFeedback(RaisePreviewGiveFeedback, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewGiveFeedback.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewGiveFeedback(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewGiveFeedback))]
  private static void RaisePreviewGiveFeedback(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewGiveFeedback.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewGiveFeedback[cPtr] != null)
    {
      _PreviewGiveFeedback[cPtr](new BaseComponent(arg0, false), new   GiveFeedbackEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewGiveFeedbackDelegate> _PreviewGiveFeedback =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewGiveFeedbackDelegate>();


  public delegate void PreviewGotKeyboardFocusDelegate(BaseComponent arg0,   KeyboardFocusChangedEventArgs arg1);
  public event PreviewGotKeyboardFocusDelegate PreviewGotKeyboardFocus
  {
    add
    {
      lock (this)
      {
        if (!_PreviewGotKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          _PreviewGotKeyboardFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewGotKeyboardFocus(RaisePreviewGotKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewGotKeyboardFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewGotKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewGotKeyboardFocus[swigCPtr.Handle] -= value;

        if (_PreviewGotKeyboardFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewGotKeyboardFocus(RaisePreviewGotKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewGotKeyboardFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewGotKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewGotKeyboardFocus))]
  private static void RaisePreviewGotKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewGotKeyboardFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewGotKeyboardFocus[cPtr] != null)
    {
      _PreviewGotKeyboardFocus[cPtr](new BaseComponent(arg0, false), new   KeyboardFocusChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewGotKeyboardFocusDelegate> _PreviewGotKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewGotKeyboardFocusDelegate>();


  public delegate void PreviewKeyDownDelegate(BaseComponent arg0,   KeyEventArgs arg1);
  public event PreviewKeyDownDelegate PreviewKeyDown
  {
    add
    {
      lock (this)
      {
        if (!_PreviewKeyDown.ContainsKey(swigCPtr.Handle))
        {
          _PreviewKeyDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewKeyDown(RaisePreviewKeyDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewKeyDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewKeyDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewKeyDown[swigCPtr.Handle] -= value;

        if (_PreviewKeyDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewKeyDown(RaisePreviewKeyDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewKeyDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewKeyDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewKeyDown))]
  private static void RaisePreviewKeyDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewKeyDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewKeyDown[cPtr] != null)
    {
      _PreviewKeyDown[cPtr](new BaseComponent(arg0, false), new   KeyEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyDownDelegate> _PreviewKeyDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyDownDelegate>();


  public delegate void PreviewKeyUpDelegate(BaseComponent arg0,   KeyEventArgs arg1);
  public event PreviewKeyUpDelegate PreviewKeyUp
  {
    add
    {
      lock (this)
      {
        if (!_PreviewKeyUp.ContainsKey(swigCPtr.Handle))
        {
          _PreviewKeyUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewKeyUp(RaisePreviewKeyUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewKeyUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewKeyUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewKeyUp[swigCPtr.Handle] -= value;

        if (_PreviewKeyUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewKeyUp(RaisePreviewKeyUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewKeyUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewKeyUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewKeyUp))]
  private static void RaisePreviewKeyUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewKeyUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewKeyUp[cPtr] != null)
    {
      _PreviewKeyUp[cPtr](new BaseComponent(arg0, false), new   KeyEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyUpDelegate> _PreviewKeyUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyUpDelegate>();


  public delegate void PreviewLostKeyboardFocusDelegate(BaseComponent arg0,   KeyboardFocusChangedEventArgs arg1);
  public event PreviewLostKeyboardFocusDelegate PreviewLostKeyboardFocus
  {
    add
    {
      lock (this)
      {
        if (!_PreviewLostKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          _PreviewLostKeyboardFocus.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewLostKeyboardFocus(RaisePreviewLostKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewLostKeyboardFocus[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewLostKeyboardFocus.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewLostKeyboardFocus[swigCPtr.Handle] -= value;

        if (_PreviewLostKeyboardFocus[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewLostKeyboardFocus(RaisePreviewLostKeyboardFocus, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewLostKeyboardFocus.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewLostKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewLostKeyboardFocus))]
  private static void RaisePreviewLostKeyboardFocus(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewLostKeyboardFocus.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewLostKeyboardFocus[cPtr] != null)
    {
      _PreviewLostKeyboardFocus[cPtr](new BaseComponent(arg0, false), new   KeyboardFocusChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewLostKeyboardFocusDelegate> _PreviewLostKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewLostKeyboardFocusDelegate>();


  public delegate void PreviewMouseDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseDownDelegate PreviewMouseDown
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseDown.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseDown(RaisePreviewMouseDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseDown[swigCPtr.Handle] -= value;

        if (_PreviewMouseDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseDown(RaisePreviewMouseDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseDown))]
  private static void RaisePreviewMouseDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseDown[cPtr] != null)
    {
      _PreviewMouseDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDownDelegate> _PreviewMouseDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDownDelegate>();


  public delegate void PreviewMouseLeftButtonDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseLeftButtonDownDelegate PreviewMouseLeftButtonDown
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseLeftButtonDown.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseLeftButtonDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseLeftButtonDown(RaisePreviewMouseLeftButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseLeftButtonDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseLeftButtonDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseLeftButtonDown[swigCPtr.Handle] -= value;

        if (_PreviewMouseLeftButtonDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseLeftButtonDown(RaisePreviewMouseLeftButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseLeftButtonDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseLeftButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseLeftButtonDown))]
  private static void RaisePreviewMouseLeftButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseLeftButtonDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseLeftButtonDown[cPtr] != null)
    {
      _PreviewMouseLeftButtonDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonDownDelegate> _PreviewMouseLeftButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonDownDelegate>();


  public delegate void PreviewMouseLeftButtonUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseLeftButtonUpDelegate PreviewMouseLeftButtonUp
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseLeftButtonUp.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseLeftButtonUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseLeftButtonUp(RaisePreviewMouseLeftButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseLeftButtonUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseLeftButtonUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseLeftButtonUp[swigCPtr.Handle] -= value;

        if (_PreviewMouseLeftButtonUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseLeftButtonUp(RaisePreviewMouseLeftButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseLeftButtonUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseLeftButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseLeftButtonUp))]
  private static void RaisePreviewMouseLeftButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseLeftButtonUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseLeftButtonUp[cPtr] != null)
    {
      _PreviewMouseLeftButtonUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonUpDelegate> _PreviewMouseLeftButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonUpDelegate>();


  public delegate void PreviewMouseMoveDelegate(BaseComponent arg0,   MouseEventArgs arg1);
  public event PreviewMouseMoveDelegate PreviewMouseMove
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseMove.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseMove.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseMove(RaisePreviewMouseMove, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseMove[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseMove.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseMove[swigCPtr.Handle] -= value;

        if (_PreviewMouseMove[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseMove(RaisePreviewMouseMove, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseMove.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseMove(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseMove))]
  private static void RaisePreviewMouseMove(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseMove.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseMove[cPtr] != null)
    {
      _PreviewMouseMove[cPtr](new BaseComponent(arg0, false), new   MouseEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseMoveDelegate> _PreviewMouseMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseMoveDelegate>();


  public delegate void PreviewMouseRightButtonDownDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseRightButtonDownDelegate PreviewMouseRightButtonDown
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseRightButtonDown.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseRightButtonDown.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseRightButtonDown(RaisePreviewMouseRightButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseRightButtonDown[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseRightButtonDown.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseRightButtonDown[swigCPtr.Handle] -= value;

        if (_PreviewMouseRightButtonDown[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseRightButtonDown(RaisePreviewMouseRightButtonDown, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseRightButtonDown.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseRightButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseRightButtonDown))]
  private static void RaisePreviewMouseRightButtonDown(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseRightButtonDown.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseRightButtonDown[cPtr] != null)
    {
      _PreviewMouseRightButtonDown[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonDownDelegate> _PreviewMouseRightButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonDownDelegate>();


  public delegate void PreviewMouseRightButtonUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseRightButtonUpDelegate PreviewMouseRightButtonUp
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseRightButtonUp.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseRightButtonUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseRightButtonUp(RaisePreviewMouseRightButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseRightButtonUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseRightButtonUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseRightButtonUp[swigCPtr.Handle] -= value;

        if (_PreviewMouseRightButtonUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseRightButtonUp(RaisePreviewMouseRightButtonUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseRightButtonUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseRightButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseRightButtonUp))]
  private static void RaisePreviewMouseRightButtonUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseRightButtonUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseRightButtonUp[cPtr] != null)
    {
      _PreviewMouseRightButtonUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonUpDelegate> _PreviewMouseRightButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonUpDelegate>();


  public delegate void PreviewMouseUpDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseUpDelegate PreviewMouseUp
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseUp.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseUp.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseUp(RaisePreviewMouseUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseUp[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseUp.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseUp[swigCPtr.Handle] -= value;

        if (_PreviewMouseUp[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseUp(RaisePreviewMouseUp, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseUp.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseUp))]
  private static void RaisePreviewMouseUp(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseUp.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseUp[cPtr] != null)
    {
      _PreviewMouseUp[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseUpDelegate> _PreviewMouseUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseUpDelegate>();


  public delegate void PreviewMouseWheelDelegate(BaseComponent arg0,   MouseWheelEventArgs arg1);
  public event PreviewMouseWheelDelegate PreviewMouseWheel
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseWheel.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseWheel.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseWheel(RaisePreviewMouseWheel, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseWheel[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseWheel.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseWheel[swigCPtr.Handle] -= value;

        if (_PreviewMouseWheel[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseWheel(RaisePreviewMouseWheel, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseWheel.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseWheel(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseWheel))]
  private static void RaisePreviewMouseWheel(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseWheel.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseWheel[cPtr] != null)
    {
      _PreviewMouseWheel[cPtr](new BaseComponent(arg0, false), new   MouseWheelEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseWheelDelegate> _PreviewMouseWheel =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseWheelDelegate>();


  public delegate void PreviewQueryContinueDragDelegate(BaseComponent arg0,   QueryContinueDragEventArgs arg1);
  public event PreviewQueryContinueDragDelegate PreviewQueryContinueDrag
  {
    add
    {
      lock (this)
      {
        if (!_PreviewQueryContinueDrag.ContainsKey(swigCPtr.Handle))
        {
          _PreviewQueryContinueDrag.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewQueryContinueDrag(RaisePreviewQueryContinueDrag, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewQueryContinueDrag[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewQueryContinueDrag.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewQueryContinueDrag[swigCPtr.Handle] -= value;

        if (_PreviewQueryContinueDrag[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewQueryContinueDrag(RaisePreviewQueryContinueDrag, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewQueryContinueDrag.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewQueryContinueDrag(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewQueryContinueDrag))]
  private static void RaisePreviewQueryContinueDrag(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewQueryContinueDrag.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewQueryContinueDrag[cPtr] != null)
    {
      _PreviewQueryContinueDrag[cPtr](new BaseComponent(arg0, false), new   QueryContinueDragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewQueryContinueDragDelegate> _PreviewQueryContinueDrag =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewQueryContinueDragDelegate>();


  public delegate void PreviewTextInputDelegate(BaseComponent arg0,   TextCompositionEventArgs arg1);
  public event PreviewTextInputDelegate PreviewTextInput
  {
    add
    {
      lock (this)
      {
        if (!_PreviewTextInput.ContainsKey(swigCPtr.Handle))
        {
          _PreviewTextInput.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewTextInput(RaisePreviewTextInput, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewTextInput[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewTextInput.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewTextInput[swigCPtr.Handle] -= value;

        if (_PreviewTextInput[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewTextInput(RaisePreviewTextInput, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewTextInput.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewTextInput(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewTextInput))]
  private static void RaisePreviewTextInput(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewTextInput.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewTextInput[cPtr] != null)
    {
      _PreviewTextInput[cPtr](new BaseComponent(arg0, false), new   TextCompositionEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewTextInputDelegate> _PreviewTextInput =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewTextInputDelegate>();


  public delegate void QueryContinueDragDelegate(BaseComponent arg0,   QueryContinueDragEventArgs arg1);
  public event QueryContinueDragDelegate QueryContinueDrag
  {
    add
    {
      lock (this)
      {
        if (!_QueryContinueDrag.ContainsKey(swigCPtr.Handle))
        {
          _QueryContinueDrag.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_QueryContinueDrag(RaiseQueryContinueDrag, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _QueryContinueDrag[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_QueryContinueDrag.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _QueryContinueDrag[swigCPtr.Handle] -= value;

        if (_QueryContinueDrag[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_QueryContinueDrag(RaiseQueryContinueDrag, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _QueryContinueDrag.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseQueryContinueDrag(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseQueryContinueDrag))]
  private static void RaiseQueryContinueDrag(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_QueryContinueDrag.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_QueryContinueDrag[cPtr] != null)
    {
      _QueryContinueDrag[cPtr](new BaseComponent(arg0, false), new   QueryContinueDragEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, QueryContinueDragDelegate> _QueryContinueDrag =
      new System.Collections.Generic.Dictionary<System.IntPtr, QueryContinueDragDelegate>();


  public delegate void QueryCursorDelegate(BaseComponent arg0,   QueryCursorEventArgs arg1);
  public event QueryCursorDelegate QueryCursor
  {
    add
    {
      lock (this)
      {
        if (!_QueryCursor.ContainsKey(swigCPtr.Handle))
        {
          _QueryCursor.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_QueryCursor(RaiseQueryCursor, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _QueryCursor[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_QueryCursor.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _QueryCursor[swigCPtr.Handle] -= value;

        if (_QueryCursor[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_QueryCursor(RaiseQueryCursor, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _QueryCursor.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseQueryCursor(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseQueryCursor))]
  private static void RaiseQueryCursor(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_QueryCursor.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_QueryCursor[cPtr] != null)
    {
      _QueryCursor[cPtr](new BaseComponent(arg0, false), new   QueryCursorEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, QueryCursorDelegate> _QueryCursor =
      new System.Collections.Generic.Dictionary<System.IntPtr, QueryCursorDelegate>();


  public delegate void TextInputDelegate(BaseComponent arg0,   TextCompositionEventArgs arg1);
  public event TextInputDelegate TextInput
  {
    add
    {
      lock (this)
      {
        if (!_TextInput.ContainsKey(swigCPtr.Handle))
        {
          _TextInput.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_UIElement_TextInput(RaiseTextInput, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _TextInput[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_TextInput.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _TextInput[swigCPtr.Handle] -= value;

        if (_TextInput[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_UIElement_TextInput(RaiseTextInput, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _TextInput.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseTextInput(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseTextInput))]
  private static void RaiseTextInput(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_TextInput.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_TextInput[cPtr] != null)
    {
      _TextInput[cPtr](new BaseComponent(arg0, false), new   TextCompositionEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TextInputDelegate> _TextInput =
      new System.Collections.Generic.Dictionary<System.IntPtr, TextInputDelegate>();


  public UIElement() : this(NoesisGUI_PINVOKE.new_UIElement(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetAllowDrop() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetAllowDrop(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetAllowDrop(bool value) {
    NoesisGUI_PINVOKE.UIElement_SetAllowDrop(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Geometry GetClip() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetClip(swigCPtr);
    Geometry ret = (cPtr == IntPtr.Zero) ? null : new Geometry(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetClip(Geometry geometry) {
    NoesisGUI_PINVOKE.UIElement_SetClip(swigCPtr, Geometry.getCPtr(geometry));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetClipToBounds() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetClipToBounds(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetClipToBounds(bool clipToBounds) {
    NoesisGUI_PINVOKE.UIElement_SetClipToBounds(swigCPtr, clipToBounds);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetFocusable() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetFocusable(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFocusable(bool value) {
    NoesisGUI_PINVOKE.UIElement_SetFocusable(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsEnabled() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsEnabled(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsEnabled(bool enabled) {
    NoesisGUI_PINVOKE.UIElement_SetIsEnabled(swigCPtr, enabled);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsFocused() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsFocused(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsHitTestVisible() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsHitTestVisible(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsHitTestVisible(bool value) {
    NoesisGUI_PINVOKE.UIElement_SetIsHitTestVisible(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsKeyboardFocused() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsKeyboardFocused(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsKeyboardFocusWithin() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsKeyboardFocusWithin(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsMouseCaptured() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsMouseCaptured(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsMouseCaptureWithin() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsMouseCaptureWithin(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsMouseDirectlyOver() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsMouseDirectlyOver(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsMouseOver() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsMouseOver(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsVisible() {
    bool ret = NoesisGUI_PINVOKE.UIElement_GetIsVisible(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Brush GetOpacityMask() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetOpacityMask(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetOpacityMask(Brush mask) {
    NoesisGUI_PINVOKE.UIElement_SetOpacityMask(swigCPtr, Brush.getCPtr(mask));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetOpacity() {
    float ret = NoesisGUI_PINVOKE.UIElement_GetOpacity(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetOpacity(float opacity) {
    NoesisGUI_PINVOKE.UIElement_SetOpacity(swigCPtr, opacity);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Projection GetProjection() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetProjection(swigCPtr);
    Projection ret = (cPtr == IntPtr.Zero) ? null : new Projection(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetProjection(Projection projection) {
    NoesisGUI_PINVOKE.UIElement_SetProjection(swigCPtr, Projection.getCPtr(projection));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Point GetRenderTransformOrigin() {
    Point ret = new Point(NoesisGUI_PINVOKE.UIElement_GetRenderTransformOrigin(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetRenderTransformOrigin(Point origin) {
    NoesisGUI_PINVOKE.UIElement_SetRenderTransformOrigin(swigCPtr, Point.getCPtr(origin));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public UITransform GetRenderTransform() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetRenderTransform(swigCPtr);
    UITransform ret = (cPtr == IntPtr.Zero) ? null : new UITransform(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetRenderTransform(UITransform transform) {
    NoesisGUI_PINVOKE.UIElement_SetRenderTransform(swigCPtr, UITransform.getCPtr(transform));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Visibility GetVisibility() {
    Visibility ret = (Visibility)NoesisGUI_PINVOKE.UIElement_GetVisibility(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetVisibility(Visibility visibility) {
    NoesisGUI_PINVOKE.UIElement_SetVisibility(swigCPtr, (int)visibility);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public UIElement GetUIParent() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetUIParent(swigCPtr);
    UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public CommandBindingCollection GetCommandBindings() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetCommandBindings(swigCPtr);
    CommandBindingCollection ret = (cPtr == IntPtr.Zero) ? null : new CommandBindingCollection(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public InputBindingCollection GetInputBindings() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetInputBindings(swigCPtr);
    InputBindingCollection ret = (cPtr == IntPtr.Zero) ? null : new InputBindingCollection(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool CaptureMouse() {
    bool ret = NoesisGUI_PINVOKE.UIElement_CaptureMouse(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void ReleaseMouseCapture() {
    NoesisGUI_PINVOKE.UIElement_ReleaseMouseCapture(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool Focus() {
    bool ret = NoesisGUI_PINVOKE.UIElement_Focus(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Size GetDesiredSize() {
    Size ret = new Size(NoesisGUI_PINVOKE.UIElement_GetDesiredSize(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Size GetRenderSize() {
    Size ret = new Size(NoesisGUI_PINVOKE.UIElement_GetRenderSize(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void InvalidateMeasure() {
    NoesisGUI_PINVOKE.UIElement_InvalidateMeasure(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsMeasureValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsMeasureValid(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Measure(Size availableSize) {
    NoesisGUI_PINVOKE.UIElement_Measure(swigCPtr, Size.getCPtr(availableSize));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void InvalidateArrange() {
    NoesisGUI_PINVOKE.UIElement_InvalidateArrange(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsArrangeValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsArrangeValid(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Arrange(Rect finalRect) {
    NoesisGUI_PINVOKE.UIElement_Arrange(swigCPtr, Rect.getCPtr(finalRect));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void InvalidateVisual() {
    NoesisGUI_PINVOKE.UIElement_InvalidateVisual(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Mouse GetMouse() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetMouse(swigCPtr);
    Mouse ret = (cPtr == IntPtr.Zero) ? null : new Mouse(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Keyboard GetKeyboard() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetKeyboard(swigCPtr);
    Keyboard ret = (cPtr == IntPtr.Zero) ? null : new Keyboard(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveFocus(TraversalRequest request) {
    bool ret = NoesisGUI_PINVOKE.UIElement_MoveFocus(swigCPtr, TraversalRequest.getCPtr(request));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }



  public virtual Size GetMeasureConstraint() {
    Size ret = new Size(NoesisGUI_PINVOKE.UIElement_GetMeasureConstraint(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public virtual Rect GetArrangeConstraint() {
    Rect ret = new Rect(NoesisGUI_PINVOKE.UIElement_GetArrangeConstraint(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static DependencyProperty AllowDropProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_AllowDropProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_AllowDropProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ClipProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_ClipProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ClipToBoundsProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_ClipToBoundsProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipToBoundsProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty EffectProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_EffectProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_EffectProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FocusableProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_FocusableProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_FocusableProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsEnabledProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsEnabledProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsEnabledProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsFocusedProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsFocusedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsFocusedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsHitTestVisibleProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsHitTestVisibleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsHitTestVisibleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsKeyboardFocusedProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsKeyboardFocusWithinProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithinProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithinProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseCapturedProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsMouseCapturedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCapturedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseCaptureWithinProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithinProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithinProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseDirectlyOverProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOverProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOverProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseOverProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsMouseOverProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseOverProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsVisibleProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_IsVisibleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsVisibleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty OpacityMaskProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_OpacityMaskProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityMaskProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty OpacityProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_OpacityProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ProjectionProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_ProjectionProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ProjectionProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RenderTransformOriginProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransformOriginProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformOriginProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RenderTransformProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransformProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty VisibilityProperty {
    set {
      NoesisGUI_PINVOKE.UIElement_VisibilityProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_VisibilityProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_UIElement(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_UIElement(valPtr);
  }

}

}

