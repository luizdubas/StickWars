/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class KeyboardFocusChangedEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  public KeyboardFocusChangedEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.KeyboardFocusChangedEventArgs_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(KeyboardFocusChangedEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~KeyboardFocusChangedEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_KeyboardFocusChangedEventArgs(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public UIElement oldFocus {
    set {
      NoesisGUI_PINVOKE.KeyboardFocusChangedEventArgs_oldFocus_set(swigCPtr, UIElement.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.KeyboardFocusChangedEventArgs_oldFocus_get(swigCPtr);
      UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public UIElement newFocus {
    set {
      NoesisGUI_PINVOKE.KeyboardFocusChangedEventArgs_newFocus_set(swigCPtr, UIElement.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.KeyboardFocusChangedEventArgs_newFocus_get(swigCPtr);
      UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public KeyboardFocusChangedEventArgs(BaseComponent s, RoutedEvent e, UIElement o, UIElement n) : this(NoesisGUI_PINVOKE.new_KeyboardFocusChangedEventArgs(BaseComponent.getCPtr(s), RoutedEvent.getCPtr(e), UIElement.getCPtr(o), UIElement.getCPtr(n)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

}

}

