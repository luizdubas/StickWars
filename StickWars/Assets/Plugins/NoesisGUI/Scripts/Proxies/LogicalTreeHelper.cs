/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class LogicalTreeHelper : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public LogicalTreeHelper(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(LogicalTreeHelper obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LogicalTreeHelper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_LogicalTreeHelper(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static FrameworkElement GetParent(FrameworkElement element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.LogicalTreeHelper_GetParent(FrameworkElement.getCPtr(element));
    FrameworkElement ret = (cPtr == IntPtr.Zero) ? null : new FrameworkElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static uint GetChildrenCount(FrameworkElement element) {
    uint ret = NoesisGUI_PINVOKE.LogicalTreeHelper_GetChildrenCount(FrameworkElement.getCPtr(element));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static BaseComponent GetChild(FrameworkElement element, uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.LogicalTreeHelper_GetChild(FrameworkElement.getCPtr(element), index);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static FrameworkElement FindName(FrameworkElement element, string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.LogicalTreeHelper_FindName(FrameworkElement.getCPtr(element), name);
    FrameworkElement ret = (cPtr == IntPtr.Zero) ? null : new FrameworkElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void PrintTree(BaseComponent root) {
    NoesisGUI_PINVOKE.LogicalTreeHelper_PrintTree(BaseComponent.getCPtr(root));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public LogicalTreeHelper() : this(NoesisGUI_PINVOKE.new_LogicalTreeHelper(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

}

}

