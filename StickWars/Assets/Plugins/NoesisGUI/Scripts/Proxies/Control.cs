/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Control : FrameworkElement {
  private HandleRef swigCPtr;

  public Control(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Control_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Control obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Control() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Control(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void MouseDoubleClickDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event MouseDoubleClickDelegate MouseDoubleClick
  {
    add
    {
      lock (this)
      {
        if (!_MouseDoubleClick.ContainsKey(swigCPtr.Handle))
        {
          _MouseDoubleClick.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Control_MouseDoubleClick(RaiseMouseDoubleClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _MouseDoubleClick[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_MouseDoubleClick.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _MouseDoubleClick[swigCPtr.Handle] -= value;

        if (_MouseDoubleClick[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Control_MouseDoubleClick(RaiseMouseDoubleClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _MouseDoubleClick.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseMouseDoubleClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseMouseDoubleClick))]
  private static void RaiseMouseDoubleClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_MouseDoubleClick.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_MouseDoubleClick[cPtr] != null)
    {
      _MouseDoubleClick[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseDoubleClickDelegate> _MouseDoubleClick =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseDoubleClickDelegate>();


  public delegate void PreviewMouseDoubleClickDelegate(BaseComponent arg0,   MouseButtonEventArgs arg1);
  public event PreviewMouseDoubleClickDelegate PreviewMouseDoubleClick
  {
    add
    {
      lock (this)
      {
        if (!_PreviewMouseDoubleClick.ContainsKey(swigCPtr.Handle))
        {
          _PreviewMouseDoubleClick.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Control_PreviewMouseDoubleClick(RaisePreviewMouseDoubleClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _PreviewMouseDoubleClick[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_PreviewMouseDoubleClick.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _PreviewMouseDoubleClick[swigCPtr.Handle] -= value;

        if (_PreviewMouseDoubleClick[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Control_PreviewMouseDoubleClick(RaisePreviewMouseDoubleClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _PreviewMouseDoubleClick.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaisePreviewMouseDoubleClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaisePreviewMouseDoubleClick))]
  private static void RaisePreviewMouseDoubleClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_PreviewMouseDoubleClick.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_PreviewMouseDoubleClick[cPtr] != null)
    {
      _PreviewMouseDoubleClick[cPtr](new BaseComponent(arg0, false), new   MouseButtonEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDoubleClickDelegate> _PreviewMouseDoubleClick =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDoubleClickDelegate>();


  public Control() : this(NoesisGUI_PINVOKE.new_Control(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Brush GetBackground() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Control_GetBackground(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetBackground(Brush brush) {
    NoesisGUI_PINVOKE.Control_SetBackground(swigCPtr, Brush.getCPtr(brush));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Brush GetBorderBrush() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Control_GetBorderBrush(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetBorderBrush(Brush brush) {
    NoesisGUI_PINVOKE.Control_SetBorderBrush(swigCPtr, Brush.getCPtr(brush));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Thickness GetBorderThickness() {
    Thickness ret = new Thickness(NoesisGUI_PINVOKE.Control_GetBorderThickness(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetBorderThickness(Thickness thickness) {
    NoesisGUI_PINVOKE.Control_SetBorderThickness(swigCPtr, Thickness.getCPtr(thickness));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetFontFamily() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Control_GetFontFamily(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetFontFamily(string fontFamily) {
    NoesisGUI_PINVOKE.Control_SetFontFamily(swigCPtr, Marshal.StringToHGlobalAnsi(fontFamily));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetFontSize() {
    float ret = NoesisGUI_PINVOKE.Control_GetFontSize(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontSize(float size) {
    NoesisGUI_PINVOKE.Control_SetFontSize(swigCPtr, size);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontStretch GetFontStretch() {
    FontStretch ret = (FontStretch)NoesisGUI_PINVOKE.Control_GetFontStretch(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontStretch(FontStretch stretch) {
    NoesisGUI_PINVOKE.Control_SetFontStretch(swigCPtr, (int)stretch);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontStyle GetFontStyle() {
    FontStyle ret = (FontStyle)NoesisGUI_PINVOKE.Control_GetFontStyle(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontStyle(FontStyle style) {
    NoesisGUI_PINVOKE.Control_SetFontStyle(swigCPtr, (int)style);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontWeight GetFontWeight() {
    FontWeight ret = (FontWeight)NoesisGUI_PINVOKE.Control_GetFontWeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontWeight(FontWeight weight) {
    NoesisGUI_PINVOKE.Control_SetFontWeight(swigCPtr, (int)weight);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Brush GetForeground() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Control_GetForeground(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetForeground(Brush foreground) {
    NoesisGUI_PINVOKE.Control_SetForeground(swigCPtr, Brush.getCPtr(foreground));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public HorizontalAlignment GetHorizontalContentAlignment() {
    HorizontalAlignment ret = (HorizontalAlignment)NoesisGUI_PINVOKE.Control_GetHorizontalContentAlignment(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetHorizontalContentAlignment(HorizontalAlignment halign) {
    NoesisGUI_PINVOKE.Control_SetHorizontalContentAlignment(swigCPtr, (int)halign);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsTabStop() {
    bool ret = NoesisGUI_PINVOKE.Control_GetIsTabStop(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsTabStop(bool value) {
    NoesisGUI_PINVOKE.Control_SetIsTabStop(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Thickness GetPadding() {
    Thickness ret = new Thickness(NoesisGUI_PINVOKE.Control_GetPadding(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetPadding(Thickness padding) {
    NoesisGUI_PINVOKE.Control_SetPadding(swigCPtr, Thickness.getCPtr(padding));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int GetTabIndex() {
    int ret = NoesisGUI_PINVOKE.Control_GetTabIndex(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetTabIndex(int value) {
    NoesisGUI_PINVOKE.Control_SetTabIndex(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ControlTemplate GetTemplate() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Control_GetTemplate(swigCPtr);
    ControlTemplate ret = (cPtr == IntPtr.Zero) ? null : new ControlTemplate(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetTemplate(ControlTemplate controlTemplate) {
    NoesisGUI_PINVOKE.Control_SetTemplate(swigCPtr, ControlTemplate.getCPtr(controlTemplate));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public VerticalAlignment GetVerticalContentAlignment() {
    VerticalAlignment ret = (VerticalAlignment)NoesisGUI_PINVOKE.Control_GetVerticalContentAlignment(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetVerticalContentAlignment(VerticalAlignment valign) {
    NoesisGUI_PINVOKE.Control_SetVerticalContentAlignment(swigCPtr, (int)valign);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty BackgroundProperty {
    set {
      NoesisGUI_PINVOKE.Control_BackgroundProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BackgroundProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty BorderBrushProperty {
    set {
      NoesisGUI_PINVOKE.Control_BorderBrushProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BorderBrushProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty BorderThicknessProperty {
    set {
      NoesisGUI_PINVOKE.Control_BorderThicknessProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BorderThicknessProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FontFamilyProperty {
    set {
      NoesisGUI_PINVOKE.Control_FontFamilyProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontFamilyProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FontSizeProperty {
    set {
      NoesisGUI_PINVOKE.Control_FontSizeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontSizeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FontStretchProperty {
    set {
      NoesisGUI_PINVOKE.Control_FontStretchProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontStretchProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FontStyleProperty {
    set {
      NoesisGUI_PINVOKE.Control_FontStyleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontStyleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FontWeightProperty {
    set {
      NoesisGUI_PINVOKE.Control_FontWeightProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontWeightProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ForegroundProperty {
    set {
      NoesisGUI_PINVOKE.Control_ForegroundProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_ForegroundProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty HorizontalContentAlignmentProperty {
    set {
      NoesisGUI_PINVOKE.Control_HorizontalContentAlignmentProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_HorizontalContentAlignmentProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsTabStopProperty {
    set {
      NoesisGUI_PINVOKE.Control_IsTabStopProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_IsTabStopProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty PaddingProperty {
    set {
      NoesisGUI_PINVOKE.Control_PaddingProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_PaddingProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty TabIndexProperty {
    set {
      NoesisGUI_PINVOKE.Control_TabIndexProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_TabIndexProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty TemplateProperty {
    set {
      NoesisGUI_PINVOKE.Control_TemplateProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_TemplateProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty VerticalContentAlignmentProperty {
    set {
      NoesisGUI_PINVOKE.Control_VerticalContentAlignmentProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_VerticalContentAlignmentProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_Control(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Control(valPtr);
  }

}

}

