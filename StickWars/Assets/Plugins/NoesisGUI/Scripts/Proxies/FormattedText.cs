/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class FormattedText : BaseComponent {
  private HandleRef swigCPtr;

  public FormattedText(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.FormattedText_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(FormattedText obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FormattedText() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_FormattedText(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FormattedText() : this(NoesisGUI_PINVOKE.new_FormattedText(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetText() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FormattedText_GetText(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetText(string text) {
    NoesisGUI_PINVOKE.FormattedText_SetText(swigCPtr, Marshal.StringToHGlobalAnsi(text));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public TextAlignment GetTextAlignment() {
    TextAlignment ret = (TextAlignment)NoesisGUI_PINVOKE.FormattedText_GetTextAlignment(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetTextAlignment(TextAlignment alignment) {
    NoesisGUI_PINVOKE.FormattedText_SetTextAlignment(swigCPtr, (int)alignment);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetFontFamily() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FormattedText_GetFontFamily(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetFontFamily(string family) {
    NoesisGUI_PINVOKE.FormattedText_SetFontFamily(swigCPtr, Marshal.StringToHGlobalAnsi(family));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetFontSize() {
    float ret = NoesisGUI_PINVOKE.FormattedText_GetFontSize(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontSize(float size) {
    NoesisGUI_PINVOKE.FormattedText_SetFontSize(swigCPtr, size);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontStretch GetFontStretch() {
    FontStretch ret = (FontStretch)NoesisGUI_PINVOKE.FormattedText_GetFontStretch(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontStretch(FontStretch stretch) {
    NoesisGUI_PINVOKE.FormattedText_SetFontStretch(swigCPtr, (int)stretch);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontStyle GetFontStyle() {
    FontStyle ret = (FontStyle)NoesisGUI_PINVOKE.FormattedText_GetFontStyle(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontStyle(FontStyle style) {
    NoesisGUI_PINVOKE.FormattedText_SetFontStyle(swigCPtr, (int)style);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FontWeight GetFontWeight() {
    FontWeight ret = (FontWeight)NoesisGUI_PINVOKE.FormattedText_GetFontWeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFontWeight(FontWeight weight) {
    NoesisGUI_PINVOKE.FormattedText_SetFontWeight(swigCPtr, (int)weight);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Brush GetForeground() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FormattedText_GetForeground(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetForeground(Brush foreground) {
    NoesisGUI_PINVOKE.FormattedText_SetForeground(swigCPtr, Brush.getCPtr(foreground));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Brush GetStroke() {
    IntPtr cPtr = NoesisGUI_PINVOKE.FormattedText_GetStroke(swigCPtr);
    Brush ret = (cPtr == IntPtr.Zero) ? null : new Brush(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetStroke(Brush stroke) {
    NoesisGUI_PINVOKE.FormattedText_SetStroke(swigCPtr, Brush.getCPtr(stroke));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetStrokeThickness() {
    float ret = NoesisGUI_PINVOKE.FormattedText_GetStrokeThickness(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetStrokeThickness(float strokeThickness) {
    NoesisGUI_PINVOKE.FormattedText_SetStrokeThickness(swigCPtr, strokeThickness);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }









  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_FormattedText(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_FormattedText(valPtr);
  }

}

}

