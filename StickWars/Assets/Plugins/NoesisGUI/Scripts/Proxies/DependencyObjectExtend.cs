/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

    public partial class DependencyObject
    {
        public T GetValue<T>(DependencyProperty dependencyProperty)
        {
            T retVal = default(T);

            if (typeof(T) == typeof(bool))
            {
                retVal = (T)(object)Noesis_DependencyGet_Bool(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(float))
            {
                retVal = (T)(object)Noesis_DependencyGet_Float(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(int))
            {
                retVal = (T)(object)Noesis_DependencyGet_Int(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(uint))
            {
                retVal = (T)(object)Noesis_DependencyGet_UInt(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(short))
            {
                retVal = (T)(object)Noesis_DependencyGet_Short(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(ushort))
            {
                retVal = (T)(object)Noesis_DependencyGet_UShort(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
            }
            else if (typeof(T) == typeof(string))
            {
                IntPtr stringPtr = Noesis_DependencyGet_String(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle);
                retVal = (T)(object)Marshal.PtrToStringAnsi(stringPtr);
            }
            else if (typeof(T).IsSubclassOf(typeof(BaseComponent)))
            {
                IntPtr bComp = Noesis_DependencyGet_BaseComponent(swigCPtr.Handle,
                    DependencyProperty.getCPtr(dependencyProperty).Handle);

                if (bComp == IntPtr.Zero)
                {
                    return (T)(object)null;
                }

                IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(typeof(T));
                IntPtr handlePtr = Noesis.Extend.TryGetHandle(typeClassPtr, bComp);

                if (handlePtr != System.IntPtr.Zero)
                {
                    GCHandle gcHandle = GCHandle.FromIntPtr(handlePtr);
                    return (T)gcHandle.Target;
                }
                else
                {
                    return (T)Activator.CreateInstance(typeof(T), new object[] { bComp, false });
                }


            }

            return retVal;
        }

        public void SetValue<T>(DependencyProperty dependencyProperty, T val)
        {
            if (typeof(T) == typeof(bool))
            {
                Noesis_DependencySet_Bool(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (bool)(object)val);
            }
            else if (typeof(T) == typeof(float))
            {
                Noesis_DependencySet_Float(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (float)(object)val);
            }
            else if (typeof(T) == typeof(int))
            {
                Noesis_DependencySet_Int(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (int)(object)val);
            }
            else if (typeof(T) == typeof(uint))
            {
                Noesis_DependencySet_UInt(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (uint)(object)val);
            }
            else if (typeof(T) == typeof(short))
            {
                Noesis_DependencySet_Short(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (short)(object)val);
            }
            else if (typeof(T) == typeof(ushort))
            {
                Noesis_DependencySet_UShort(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (ushort)(object)val);
            }
            else if (typeof(T) == typeof(string))
            {
                IntPtr stringPtr = Marshal.StringToHGlobalAnsi((string)(object)val);
                Noesis_DependencySet_String(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  stringPtr);
            }
            else if (typeof(T).IsSubclassOf(typeof(BaseComponent)))
            {
                Noesis_DependencySet_BaseComponent(swigCPtr.Handle,
                  DependencyProperty.getCPtr(dependencyProperty).Handle,
                  (object)val != null ? BaseComponent.getCPtr((BaseComponent)(object)val).Handle : IntPtr.Zero);
            }
        }

    #if UNITY_EDITOR

        ////////////////////////////////////////////////////////////////////////////////////////////////
        public static void RegisterFunctions(Library lib)
        {
            // DependencyObject Get/Set
            _DependencyGet_Bool = lib.Find<DependencyGet_BoolDelegate>(
                "Noesis_DependencyGet_Bool");
            _DependencyGet_Float = lib.Find<DependencyGet_FloatDelegate>(
                "Noesis_DependencyGet_Float");
            _DependencyGet_Int = lib.Find<DependencyGet_IntDelegate>(
                "Noesis_DependencyGet_Int");
            _DependencyGet_UInt = lib.Find<DependencyGet_UIntDelegate>(
                "Noesis_DependencyGet_UInt");
            _DependencyGet_Short = lib.Find<DependencyGet_ShortDelegate>(
                "Noesis_DependencyGet_Short");
            _DependencyGet_UShort = lib.Find<DependencyGet_UShortDelegate>(
                "Noesis_DependencyGet_UShort");
            _DependencyGet_String = lib.Find<DependencyGet_StringDelegate>(
                "Noesis_DependencyGet_String");
            _DependencyGet_BaseComponent = lib.Find<DependencyGet_BaseComponentDelegate>(
                "Noesis_DependencyGet_BaseComponent");

            _DependencySet_Bool = lib.Find<DependencySet_BoolDelegate>(
                "Noesis_DependencySet_Bool");
            _DependencySet_Float = lib.Find<DependencySet_FloatDelegate>(
                "Noesis_DependencySet_Float");
            _DependencySet_Int = lib.Find<DependencySet_IntDelegate>(
                "Noesis_DependencySet_Int");
            _DependencySet_UInt = lib.Find<DependencySet_UIntDelegate>(
                "Noesis_DependencySet_UInt");
            _DependencySet_Short = lib.Find<DependencySet_ShortDelegate>(
                "Noesis_DependencySet_Short");
            _DependencySet_UShort = lib.Find<DependencySet_UShortDelegate>(
                "Noesis_DependencySet_UShort");
            _DependencySet_String = lib.Find<DependencySet_StringDelegate>(
                "Noesis_DependencySet_String");
            _DependencySet_BaseComponent = lib.Find<DependencySet_BaseComponentDelegate>(
                "Noesis_DependencySet_BaseComponent");
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        [return: MarshalAs(UnmanagedType.U1)]
        delegate bool DependencyGet_BoolDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_BoolDelegate _DependencyGet_Bool;
        private static bool Noesis_DependencyGet_Bool(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            bool result = _DependencyGet_Bool(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate float DependencyGet_FloatDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_FloatDelegate _DependencyGet_Float;
        private static float Noesis_DependencyGet_Float(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            float result = _DependencyGet_Float(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate int DependencyGet_IntDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_IntDelegate _DependencyGet_Int;
        private static int Noesis_DependencyGet_Int(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            int result = _DependencyGet_Int(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate uint DependencyGet_UIntDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_UIntDelegate _DependencyGet_UInt;
        private static uint Noesis_DependencyGet_UInt(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            uint result = _DependencyGet_UInt(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate short DependencyGet_ShortDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_ShortDelegate _DependencyGet_Short;
        private static short Noesis_DependencyGet_Short(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            short result = _DependencyGet_Short(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate ushort DependencyGet_UShortDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_UShortDelegate _DependencyGet_UShort;
        private static ushort Noesis_DependencyGet_UShort(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            ushort result = _DependencyGet_UShort(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr DependencyGet_StringDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_StringDelegate _DependencyGet_String;
        private static IntPtr Noesis_DependencyGet_String(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            IntPtr result = _DependencyGet_String(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }
        
        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr DependencyGet_BaseComponentDelegate(IntPtr dependencyObject, IntPtr dependencyProperty);
        static DependencyGet_BaseComponentDelegate _DependencyGet_BaseComponent;
        private static IntPtr Noesis_DependencyGet_BaseComponent(IntPtr dependencyObject, IntPtr dependencyProperty)
        {
            IntPtr result = _DependencyGet_BaseComponent(dependencyObject, dependencyProperty);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_BoolDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, [MarshalAs(UnmanagedType.U1)]bool val);
        static DependencySet_BoolDelegate _DependencySet_Bool;
        private static void Noesis_DependencySet_Bool(IntPtr dependencyObject, IntPtr dependencyProperty, [MarshalAs(UnmanagedType.U1)]bool val)
        {
            _DependencySet_Bool(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_FloatDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, float val);
        static DependencySet_FloatDelegate _DependencySet_Float;
        private static void Noesis_DependencySet_Float(IntPtr dependencyObject, IntPtr dependencyProperty, float val)
        {
            _DependencySet_Float(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_IntDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, int val);
        static DependencySet_IntDelegate _DependencySet_Int;
        private static void Noesis_DependencySet_Int(IntPtr dependencyObject, IntPtr dependencyProperty, int val)
        {
            _DependencySet_Int(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_UIntDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, uint val);
        static DependencySet_UIntDelegate _DependencySet_UInt;
        private static void Noesis_DependencySet_UInt(IntPtr dependencyObject, IntPtr dependencyProperty, uint val)
        {
            _DependencySet_UInt(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_ShortDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, short val);
        static DependencySet_ShortDelegate _DependencySet_Short;
        private static void Noesis_DependencySet_Short(IntPtr dependencyObject, IntPtr dependencyProperty, short val)
        {
            _DependencySet_Short(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_UShortDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, ushort val);
        static DependencySet_UShortDelegate _DependencySet_UShort;
        private static void Noesis_DependencySet_UShort(IntPtr dependencyObject, IntPtr dependencyProperty, ushort val)
        {
            _DependencySet_UShort(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_StringDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, IntPtr val);
        static DependencySet_StringDelegate _DependencySet_String;
        private static void Noesis_DependencySet_String(IntPtr dependencyObject, IntPtr dependencyProperty, IntPtr val)
        {
            _DependencySet_String(dependencyObject, dependencyProperty, val);
            Error.Check();
        }
        
        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void DependencySet_BaseComponentDelegate(IntPtr dependencyObject, IntPtr dependencyProperty, IntPtr val);
        static DependencySet_BaseComponentDelegate _DependencySet_BaseComponent;
        private static void Noesis_DependencySet_BaseComponent(IntPtr dependencyObject, IntPtr dependencyProperty, IntPtr val)
        {
            _DependencySet_BaseComponent(dependencyObject, dependencyProperty, val);
            Error.Check();
        }

    #else

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_Bool")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_Bool")]
        #endif
        [return: MarshalAs(UnmanagedType.U1)]
        private static extern bool Noesis_DependencyGet_Bool(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_Float")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_Float")]
        #endif
        private static extern float Noesis_DependencyGet_Float(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_Int")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_Int")]
        #endif
        private static extern int Noesis_DependencyGet_Int(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_UInt")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_UInt")]
        #endif
        private static extern uint Noesis_DependencyGet_UInt(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_Short")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_Short")]
        #endif
        private static extern short Noesis_DependencyGet_Short(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_UShort")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_UShort")]
        #endif
        private static extern ushort Noesis_DependencyGet_UShort(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_String")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_String")]
        #endif
        private static extern IntPtr Noesis_DependencyGet_String(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencyGet_BaseComponent")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencyGet_BaseComponent")]
        #endif
        private static extern IntPtr Noesis_DependencyGet_BaseComponent(IntPtr dependencyObject,
            IntPtr dependencyProperty);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_Bool")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_Bool")]
        #endif
        private static extern void Noesis_DependencySet_Bool(IntPtr dependencyObject,
            IntPtr dependencyProperty, [MarshalAs(UnmanagedType.U1)] bool val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_Float")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_Float")]
        #endif
        private static extern void Noesis_DependencySet_Float(IntPtr dependencyObject,
            IntPtr dependencyProperty, float val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_Int")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_Int")]
        #endif
        private static extern void Noesis_DependencySet_Int(IntPtr dependencyObject,
            IntPtr dependencyProperty, int val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_UInt")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_UInt")]
        #endif
        private static extern void Noesis_DependencySet_UInt(IntPtr dependencyObject,
            IntPtr dependencyProperty, uint val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_Short")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_Short")]
        #endif
        private static extern void Noesis_DependencySet_Short(IntPtr dependencyObject,
            IntPtr dependencyProperty, short val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_UShort")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_UShort")]
        #endif
        private static extern void Noesis_DependencySet_UShort(IntPtr dependencyObject,
            IntPtr dependencyProperty, ushort val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_String")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_String")]
        #endif
        private static extern void Noesis_DependencySet_String(IntPtr dependencyObject,
            IntPtr dependencyProperty, IntPtr val);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_DependencySet_BaseComponent")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_DependencySet_BaseComponent")]
        #endif
        private static extern void Noesis_DependencySet_BaseComponent(IntPtr dependencyObject,
            IntPtr dependencyProperty, IntPtr val);

    #endif
    }

}