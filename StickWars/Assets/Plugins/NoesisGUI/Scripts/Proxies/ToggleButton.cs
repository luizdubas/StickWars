/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ToggleButton : BaseButton {
  private HandleRef swigCPtr;

  public ToggleButton(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.ToggleButton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ToggleButton obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ToggleButton() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_ToggleButton(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void CheckedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event CheckedDelegate Checked
  {
    add
    {
      lock (this)
      {
        if (!_Checked.ContainsKey(swigCPtr.Handle))
        {
          _Checked.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ToggleButton_Checked(RaiseChecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Checked[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Checked.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Checked[swigCPtr.Handle] -= value;

        if (_Checked[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Checked(RaiseChecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Checked.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseChecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseChecked))]
  private static void RaiseChecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Checked.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Checked[cPtr] != null)
    {
      _Checked[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, CheckedDelegate> _Checked =
      new System.Collections.Generic.Dictionary<System.IntPtr, CheckedDelegate>();


  public delegate void IndeterminateDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event IndeterminateDelegate Indeterminate
  {
    add
    {
      lock (this)
      {
        if (!_Indeterminate.ContainsKey(swigCPtr.Handle))
        {
          _Indeterminate.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ToggleButton_Indeterminate(RaiseIndeterminate, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Indeterminate[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Indeterminate.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Indeterminate[swigCPtr.Handle] -= value;

        if (_Indeterminate[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Indeterminate(RaiseIndeterminate, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Indeterminate.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseIndeterminate(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseIndeterminate))]
  private static void RaiseIndeterminate(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Indeterminate.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Indeterminate[cPtr] != null)
    {
      _Indeterminate[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, IndeterminateDelegate> _Indeterminate =
      new System.Collections.Generic.Dictionary<System.IntPtr, IndeterminateDelegate>();


  public delegate void UncheckedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event UncheckedDelegate Unchecked
  {
    add
    {
      lock (this)
      {
        if (!_Unchecked.ContainsKey(swigCPtr.Handle))
        {
          _Unchecked.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ToggleButton_Unchecked(RaiseUnchecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Unchecked[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Unchecked.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Unchecked[swigCPtr.Handle] -= value;

        if (_Unchecked[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Unchecked(RaiseUnchecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Unchecked.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseUnchecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseUnchecked))]
  private static void RaiseUnchecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Unchecked.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Unchecked[cPtr] != null)
    {
      _Unchecked[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, UncheckedDelegate> _Unchecked =
      new System.Collections.Generic.Dictionary<System.IntPtr, UncheckedDelegate>();


  public ToggleButton() : this(NoesisGUI_PINVOKE.new_ToggleButton(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public System.Nullable<bool> GetIsChecked() {
    NullableBool ret = new NullableBool(NoesisGUI_PINVOKE.ToggleButton_GetIsChecked(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    System.Nullable<bool> retNullable = null;
    if (ret.HasValue())
    {
      retNullable = ret.GetValue();
    }
    return retNullable;
  }

  public void SetIsChecked(System.Nullable<bool> arg0_) {
    NullableBool arg0 = new NullableBool();
    if (arg0_.HasValue)
    {
      arg0.SetValue(arg0_.Value);
    }

    NoesisGUI_PINVOKE.ToggleButton_SetIsChecked(swigCPtr, NullableBool.getCPtr(arg0));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsThreeState() {
    bool ret = NoesisGUI_PINVOKE.ToggleButton_GetIsThreeState(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsThreeState(bool state) {
    NoesisGUI_PINVOKE.ToggleButton_SetIsThreeState(swigCPtr, state);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty IsCheckedProperty {
    set {
      NoesisGUI_PINVOKE.ToggleButton_IsCheckedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ToggleButton_IsCheckedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsThreeStateProperty {
    set {
      NoesisGUI_PINVOKE.ToggleButton_IsThreeStateProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ToggleButton_IsThreeStateProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_ToggleButton(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_ToggleButton(valPtr);
  }

}

}

