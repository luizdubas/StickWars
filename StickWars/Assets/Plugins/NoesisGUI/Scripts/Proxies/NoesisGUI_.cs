/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class NoesisGUI_ {
  public static NsString UnboxString(BaseComponent boxed) {
    NsString ret = new NsString(NoesisGUI_PINVOKE.UnboxString(BaseComponent.getCPtr(boxed)), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color PreMultiplyAlpha(Color color) {
    Color ret = new Color(NoesisGUI_PINVOKE.PreMultiplyAlpha(Color.getCPtr(color)), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Lerp(Color c0, Color c1, float t, bool sRGBSpace) {
    Color ret = new Color(NoesisGUI_PINVOKE.Lerp__SWIG_0(Color.getCPtr(c0), Color.getCPtr(c1), t, sRGBSpace), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Lerp(Color c0, Color c1, float t) {
    Color ret = new Color(NoesisGUI_PINVOKE.Lerp__SWIG_1(Color.getCPtr(c0), Color.getCPtr(c1), t), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Add(Color c0, Color c1, bool sRGBSpace) {
    Color ret = new Color(NoesisGUI_PINVOKE.Add__SWIG_0(Color.getCPtr(c0), Color.getCPtr(c1), sRGBSpace), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Add(Color c0, Color c1) {
    Color ret = new Color(NoesisGUI_PINVOKE.Add__SWIG_1(Color.getCPtr(c0), Color.getCPtr(c1)), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Modulate(Color c0, Color c1) {
    Color ret = new Color(NoesisGUI_PINVOKE.Modulate(Color.getCPtr(c0), Color.getCPtr(c1)), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }





  public static void ClearAllBindings(DependencyObject target) {
    NoesisGUI_PINVOKE.ClearAllBindings(DependencyObject.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static void ClearBinding(DependencyObject target, DependencyProperty dp) {
    NoesisGUI_PINVOKE.ClearBinding(DependencyObject.getCPtr(target), DependencyProperty.getCPtr(dp));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static BaseBinding GetBindingBase(DependencyObject target, DependencyProperty dp) {
    IntPtr cPtr = NoesisGUI_PINVOKE.GetBindingBase(DependencyObject.getCPtr(target), DependencyProperty.getCPtr(dp));
    BaseBinding ret = (cPtr == IntPtr.Zero) ? null : new BaseBinding(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }















}

}

