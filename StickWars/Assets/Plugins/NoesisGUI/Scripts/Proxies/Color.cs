/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Color : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Color(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Color obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Color() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Color(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Color() : this(NoesisGUI_PINVOKE.new_Color__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Color(float red, float green, float blue, float alpha) : this(NoesisGUI_PINVOKE.new_Color__SWIG_1(red, green, blue, alpha), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Color(float red, float green, float blue) : this(NoesisGUI_PINVOKE.new_Color__SWIG_2(red, green, blue), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Color(int red, int green, int blue, int alpha) : this(NoesisGUI_PINVOKE.new_Color__SWIG_3(red, green, blue, alpha), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Color(int red, int green, int blue) : this(NoesisGUI_PINVOKE.new_Color__SWIG_4(red, green, blue), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static Color FromPackedBGRA(uint color) {
    Color ret = new Color(NoesisGUI_PINVOKE.Color_FromPackedBGRA(color), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color FromPackedRGBA(uint color) {
    Color ret = new Color(NoesisGUI_PINVOKE.Color_FromPackedRGBA(color), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color FromLinearRGB(float red, float green, float blue, float alpha) {
    Color ret = new Color(NoesisGUI_PINVOKE.Color_FromLinearRGB__SWIG_0(red, green, blue, alpha), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color FromLinearRGB(float red, float green, float blue) {
    Color ret = new Color(NoesisGUI_PINVOKE.Color_FromLinearRGB__SWIG_1(red, green, blue), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }



  public void SetRed(float red) {
    NoesisGUI_PINVOKE.Color_SetRed__SWIG_0(swigCPtr, red);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetRed(int red) {
    NoesisGUI_PINVOKE.Color_SetRed__SWIG_1(swigCPtr, red);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetGreen(float green) {
    NoesisGUI_PINVOKE.Color_SetGreen__SWIG_0(swigCPtr, green);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetGreen(int green) {
    NoesisGUI_PINVOKE.Color_SetGreen__SWIG_1(swigCPtr, green);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetBlue(float blue) {
    NoesisGUI_PINVOKE.Color_SetBlue__SWIG_0(swigCPtr, blue);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetBlue(int blue) {
    NoesisGUI_PINVOKE.Color_SetBlue__SWIG_1(swigCPtr, blue);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetAlpha(float alpha) {
    NoesisGUI_PINVOKE.Color_SetAlpha__SWIG_0(swigCPtr, alpha);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetAlpha(int alpha) {
    NoesisGUI_PINVOKE.Color_SetAlpha__SWIG_1(swigCPtr, alpha);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetPackedColorBGRA(uint color) {
    NoesisGUI_PINVOKE.Color_SetPackedColorBGRA(swigCPtr, color);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetPackedColorRGBA(uint color) {
    NoesisGUI_PINVOKE.Color_SetPackedColorRGBA(swigCPtr, color);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int GetRedI() {
    int ret = NoesisGUI_PINVOKE.Color_GetRedI(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public int GetGreenI() {
    int ret = NoesisGUI_PINVOKE.Color_GetGreenI(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public int GetBlueI() {
    int ret = NoesisGUI_PINVOKE.Color_GetBlueI(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public int GetAlphaI() {
    int ret = NoesisGUI_PINVOKE.Color_GetAlphaI(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public float GetRedF() {
    float ret = NoesisGUI_PINVOKE.Color_GetRedF(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public float GetGreenF() {
    float ret = NoesisGUI_PINVOKE.Color_GetGreenF(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public float GetBlueF() {
    float ret = NoesisGUI_PINVOKE.Color_GetBlueF(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public float GetAlphaF() {
    float ret = NoesisGUI_PINVOKE.Color_GetAlphaF(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public uint GetPackedColorBGRA() {
    uint ret = NoesisGUI_PINVOKE.Color_GetPackedColorBGRA(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public uint GetPackedColorRGBA() {
    uint ret = NoesisGUI_PINVOKE.Color_GetPackedColorRGBA(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static bool TryParse(string str, Color output) {
    bool ret = NoesisGUI_PINVOKE.Color_TryParse(str, Color.getCPtr(output));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Parse(string str) {
    Color ret = new Color(NoesisGUI_PINVOKE.Color_Parse(str), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Color Black {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Black_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Blue {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Blue_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Cyan {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Cyan_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color DarkGray {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_DarkGray_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Gray {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Gray_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Green {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Green_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color LightGray {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_LightGray_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Magenta {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Magenta_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Orange {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Orange_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Pink {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Pink_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Red {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Red_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color White {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_White_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static Color Yellow {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Color_Yellow_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

}

}

