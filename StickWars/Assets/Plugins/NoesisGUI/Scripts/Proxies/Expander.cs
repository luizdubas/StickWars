/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Expander : HeaderedContentControl {
  private HandleRef swigCPtr;

  public Expander(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Expander_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Expander obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Expander() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Expander(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void CollapsedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event CollapsedDelegate Collapsed
  {
    add
    {
      lock (this)
      {
        if (!_Collapsed.ContainsKey(swigCPtr.Handle))
        {
          _Collapsed.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Expander_Collapsed(RaiseCollapsed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Collapsed[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Collapsed.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Collapsed[swigCPtr.Handle] -= value;

        if (_Collapsed[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Expander_Collapsed(RaiseCollapsed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Collapsed.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseCollapsed(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseCollapsed))]
  private static void RaiseCollapsed(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Collapsed.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Collapsed[cPtr] != null)
    {
      _Collapsed[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, CollapsedDelegate> _Collapsed =
      new System.Collections.Generic.Dictionary<System.IntPtr, CollapsedDelegate>();


  public delegate void ExpandedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event ExpandedDelegate Expanded
  {
    add
    {
      lock (this)
      {
        if (!_Expanded.ContainsKey(swigCPtr.Handle))
        {
          _Expanded.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Expander_Expanded(RaiseExpanded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Expanded[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Expanded.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Expanded[swigCPtr.Handle] -= value;

        if (_Expanded[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Expander_Expanded(RaiseExpanded, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Expanded.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseExpanded(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseExpanded))]
  private static void RaiseExpanded(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Expanded.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Expanded[cPtr] != null)
    {
      _Expanded[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ExpandedDelegate> _Expanded =
      new System.Collections.Generic.Dictionary<System.IntPtr, ExpandedDelegate>();


  public Expander() : this(NoesisGUI_PINVOKE.new_Expander(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ExpandDirection GetExpandDirection() {
    ExpandDirection ret = (ExpandDirection)NoesisGUI_PINVOKE.Expander_GetExpandDirection(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetExpandDirection(ExpandDirection direction) {
    NoesisGUI_PINVOKE.Expander_SetExpandDirection(swigCPtr, (int)direction);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsExpanded() {
    bool ret = NoesisGUI_PINVOKE.Expander_GetIsExpanded(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsExpanded(bool isExpanded) {
    NoesisGUI_PINVOKE.Expander_SetIsExpanded(swigCPtr, isExpanded);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty ExpandDirectionProperty {
    set {
      NoesisGUI_PINVOKE.Expander_ExpandDirectionProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Expander_ExpandDirectionProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsExpandedProperty {
    set {
      NoesisGUI_PINVOKE.Expander_IsExpandedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Expander_IsExpandedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_Expander(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Expander(valPtr);
  }

}

}

