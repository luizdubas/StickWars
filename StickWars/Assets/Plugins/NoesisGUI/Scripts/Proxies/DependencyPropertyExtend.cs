/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

    public partial class DependencyProperty
    {
        public static DependencyProperty Register(string propertyName, System.Type propertyType,
            System.Type ownerType, PropertyMetadata propertyMetadata)
        {
            IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(ownerType);
            IntPtr propertyNamePtr = Marshal.StringToHGlobalAnsi(propertyName);
            DependencyProperty dependencyProperty = null;
            if (propertyType == typeof(bool))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_Bool(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(float))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_Float(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(int))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_Int(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(uint))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_UInt(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(short))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_Short(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(ushort))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_UShort(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType == typeof(string))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_String(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            }
            else if (propertyType.IsSubclassOf(typeof(BaseComponent)))
            {
                IntPtr dependencyPtr = Noesis_RegisterDependencyProperty_BaseComponent(typeClassPtr,
                    propertyNamePtr, PropertyMetadata.getCPtr(propertyMetadata).Handle);
                dependencyProperty = new DependencyProperty(dependencyPtr, false);
            } 

            return dependencyProperty;
        }

        public void OverrideMetadata(System.Type forType, PropertyMetadata propertyMetadata)
        {
            Noesis_OverrideMetadata(Noesis.Extend.GetPtrForType(forType), swigCPtr.Handle,
                PropertyMetadata.getCPtr(propertyMetadata).Handle);
        }

    #if UNITY_EDITOR

        ////////////////////////////////////////////////////////////////////////////////////////////////
        public static void RegisterFunctions(Library lib)
        {
            // register DependencyProperty
            _RegisterDependencyProperty_Bool = lib.Find<RegisterDependencyPropertyDelegate_Bool>(
                "Noesis_RegisterDependencyProperty_Bool");
            _RegisterDependencyProperty_Float = lib.Find<RegisterDependencyPropertyDelegate_Float>(
                "Noesis_RegisterDependencyProperty_Float");
            _RegisterDependencyProperty_Int = lib.Find<RegisterDependencyPropertyDelegate_Int>(
                "Noesis_RegisterDependencyProperty_Int");
            _RegisterDependencyProperty_UInt = lib.Find<RegisterDependencyPropertyDelegate_UInt>(
                "Noesis_RegisterDependencyProperty_UInt");
            _RegisterDependencyProperty_Short = lib.Find<RegisterDependencyPropertyDelegate_Short>(
                "Noesis_RegisterDependencyProperty_Short");
            _RegisterDependencyProperty_UShort = lib.Find<RegisterDependencyPropertyDelegate_UShort>(
                "Noesis_RegisterDependencyProperty_UShort");
            _RegisterDependencyProperty_String = lib.Find<RegisterDependencyPropertyDelegate_String>(
                "Noesis_RegisterDependencyProperty_String");
            _RegisterDependencyProperty_BaseComponent = lib.Find<RegisterDependencyPropertyDelegate_BaseComponent>(
                "Noesis_RegisterDependencyProperty_BaseComponent");

            // override PropertyMetadata 
            _OverrideMetadata = lib.Find<OverrideMetadataDelegate>("Noesis_OverrideMetadata");
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_Bool(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_Bool _RegisterDependencyProperty_Bool;
        private static IntPtr Noesis_RegisterDependencyProperty_Bool(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_Bool(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_Float(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_Float _RegisterDependencyProperty_Float;
        private static IntPtr Noesis_RegisterDependencyProperty_Float(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_Float(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_Int(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_Int _RegisterDependencyProperty_Int;
        private static IntPtr Noesis_RegisterDependencyProperty_Int(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_Int(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_UInt(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_UInt _RegisterDependencyProperty_UInt;
        private static IntPtr Noesis_RegisterDependencyProperty_UInt(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_UInt(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_Short(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_Short _RegisterDependencyProperty_Short;
        private static IntPtr Noesis_RegisterDependencyProperty_Short(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_Short(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_UShort(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_UShort _RegisterDependencyProperty_UShort;
        private static IntPtr Noesis_RegisterDependencyProperty_UShort(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_UShort(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_String(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_String _RegisterDependencyProperty_String;
        private static IntPtr Noesis_RegisterDependencyProperty_String(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_String(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }
        
        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate IntPtr RegisterDependencyPropertyDelegate_BaseComponent(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        static RegisterDependencyPropertyDelegate_BaseComponent _RegisterDependencyProperty_BaseComponent;
        private static IntPtr Noesis_RegisterDependencyProperty_BaseComponent(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata)
        {
            IntPtr result = _RegisterDependencyProperty_BaseComponent(classType, propertyName, propertyMetadata);
            Error.Check();
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        delegate void OverrideMetadataDelegate(IntPtr classType, IntPtr dependencyProperty,
            IntPtr propertyMetadata);
        static OverrideMetadataDelegate _OverrideMetadata;
        private static void Noesis_OverrideMetadata(IntPtr classType, IntPtr dependencyProperty,
            IntPtr propertyMetadata)
        {
            _OverrideMetadata(classType, dependencyProperty, propertyMetadata);
            Error.Check();
        }

    #else

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_Bool")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_Bool")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_Bool(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_Float")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_Float")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_Float(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_Int")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_Int")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_Int(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_UInt")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_UInt")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_UInt(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_Short")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_Short")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_Short(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_UShort")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_UShort")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_UShort(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_String")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_String")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_String(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);
        
        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_RegisterDependencyProperty_BaseComponent")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_RegisterDependencyProperty_BaseComponent")]
        #endif
        private static extern IntPtr Noesis_RegisterDependencyProperty_BaseComponent(IntPtr classType,
            IntPtr propertyName, IntPtr propertyMetadata);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        #if UNITY_IPHONE || UNITY_XBOX360
        [DllImport("__Internal", EntryPoint="Noesis_OverrideMetadata")]
        #else
        [DllImport("Noesis", EntryPoint = "Noesis_OverrideMetadata")]
        #endif
        private static extern void Noesis_OverrideMetadata(IntPtr classType,
            IntPtr dependencyProperty, IntPtr propertyMetadata);

    #endif

    }

}