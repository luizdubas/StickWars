/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Timeline : Animatable {
  private HandleRef swigCPtr;

  public Timeline(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Timeline_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Timeline obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Timeline() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Timeline(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static int GetDesiredFrameRate(DependencyObject timeline) {
    int ret = NoesisGUI_PINVOKE.Timeline_GetDesiredFrameRate(DependencyObject.getCPtr(timeline));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetDesiredFrameRate(DependencyObject timeline, int rate) {
    NoesisGUI_PINVOKE.Timeline_SetDesiredFrameRate(DependencyObject.getCPtr(timeline), rate);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetAccelerationRatio() {
    float ret = NoesisGUI_PINVOKE.Timeline_GetAccelerationRatio(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetAccelerationRatio(float value) {
    NoesisGUI_PINVOKE.Timeline_SetAccelerationRatio(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetAutoReverse() {
    bool ret = NoesisGUI_PINVOKE.Timeline_GetAutoReverse(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetAutoReverse(bool value) {
    NoesisGUI_PINVOKE.Timeline_SetAutoReverse(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }





  public float GetDecelerationRatio() {
    float ret = NoesisGUI_PINVOKE.Timeline_GetDecelerationRatio(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDecelerationRatio(float value) {
    NoesisGUI_PINVOKE.Timeline_SetDecelerationRatio(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Duration GetDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetDuration(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDuration(Duration duration) {
    NoesisGUI_PINVOKE.Timeline_SetDuration(swigCPtr, Duration.getCPtr(duration));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FillBehavior GetFillBehavior() {
    FillBehavior ret = (FillBehavior)NoesisGUI_PINVOKE.Timeline_GetFillBehavior(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetFillBehavior(FillBehavior behavior) {
    NoesisGUI_PINVOKE.Timeline_SetFillBehavior(swigCPtr, (int)behavior);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetName() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_GetName(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetName(string name) {
    NoesisGUI_PINVOKE.Timeline_SetName(swigCPtr, Marshal.StringToHGlobalAnsi(name));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public RepeatBehavior GetRepeatBehavior() {
    RepeatBehavior ret = new RepeatBehavior(NoesisGUI_PINVOKE.Timeline_GetRepeatBehavior(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetRepeatBehavior(RepeatBehavior behavior) {
    NoesisGUI_PINVOKE.Timeline_SetRepeatBehavior(swigCPtr, RepeatBehavior.getCPtr(behavior));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetSpeedRatio() {
    float ret = NoesisGUI_PINVOKE.Timeline_GetSpeedRatio(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetSpeedRatio(float value) {
    NoesisGUI_PINVOKE.Timeline_SetSpeedRatio(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public virtual Duration GetNaturalDuration(Clock clock) {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetNaturalDuration(swigCPtr, Clock.getCPtr(clock)), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Duration GetSinglePassDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetSinglePassDuration(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Duration GetIterationDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetIterationDuration(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Duration GetTotalDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetTotalDuration(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsTotalDurationAbsolute() {
    bool ret = NoesisGUI_PINVOKE.Timeline_IsTotalDurationAbsolute(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Duration GetNormalizedDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetNormalizedDuration(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void CalculateEffectiveDurations() {
    NoesisGUI_PINVOKE.Timeline_CalculateEffectiveDurations(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public virtual Duration GetEffectiveDuration() {
    Duration ret = new Duration(NoesisGUI_PINVOKE.Timeline_GetEffectiveDuration(swigCPtr), true);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public virtual void OnClockDestroyed(Clock clock) {
    NoesisGUI_PINVOKE.Timeline_OnClockDestroyed(swigCPtr, Clock.getCPtr(clock));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty AccelerationRatioProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_AccelerationRatioProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_AccelerationRatioProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty AutoReverseProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_AutoReverseProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_AutoReverseProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty BeginTimeProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_BeginTimeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_BeginTimeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty DecelerationRatioProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_DecelerationRatioProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_DecelerationRatioProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty DesiredFrameRateProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_DesiredFrameRateProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_DesiredFrameRateProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty DurationProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_DurationProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_DurationProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FillBehaviorProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_FillBehaviorProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_FillBehaviorProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty NameProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_NameProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_NameProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RepeatBehaviorProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_RepeatBehaviorProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_RepeatBehaviorProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SpeedRatioProperty {
    set {
      NoesisGUI_PINVOKE.Timeline_SpeedRatioProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Timeline_SpeedRatioProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public delegate void CompletedDelegate(BaseComponent arg0, TimelineEventArgs arg1);
  public event CompletedDelegate Completed
  {
    add
    {
      lock(this)
      {
        if (!_Completed.ContainsKey(swigCPtr.Handle))
        {
          _Completed.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Timeline_Completed(RaiseCompleted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Completed[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock(this)
      {
        if (!_Completed.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Completed[swigCPtr.Handle] -= value;

        if (_Completed[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Timeline_Completed(RaiseCompleted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Completed.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseCompleted(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseCompleted))]
  private static void RaiseCompleted(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Completed.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }
    if (_Completed[cPtr] != null)
    {
      _Completed[cPtr](new BaseComponent(arg0, false), new TimelineEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, CompletedDelegate> _Completed =
      new System.Collections.Generic.Dictionary<System.IntPtr, CompletedDelegate>();

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Timeline(valPtr);
  }

}

}

