/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

    public partial class BaseComponent
    {
        public string AsString()
        {
            NsString nsstring = NoesisGUI_.UnboxString(this);
            string ret = nsstring.c_str();
            return ret;
        }

        public T As<T>() where T : BaseComponent
        {
            if (swigCPtr.Handle == IntPtr.Zero)
            {
                return (T)(object)null;
            }

            IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(typeof(T));
            IntPtr handlePtr = Noesis.Extend.TryGetHandle(typeClassPtr, swigCPtr.Handle);

            if (handlePtr != System.IntPtr.Zero)
            {
                GCHandle gcHandle = GCHandle.FromIntPtr(handlePtr);
                return (T)gcHandle.Target;
            }
            else
            {
                if ((bool) typeof(T).GetMethod("CheckType").Invoke(null, new object[] { this }))
                {
                    return (T)Activator.CreateInstance(typeof(T), new object[] { swigCPtr.Handle, false });
                }
                return (T)null;
            }
        }

        public static bool operator ==(BaseComponent a, BaseComponent b)
        {
            // If both are null, or both are the same instance, return true.
            if (System.Object.ReferenceEquals(a, b))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if ((object)a == null || (object)b == null)
            {
                return false;
            }

            // Return true if wrapped c++ objects match:
            return a.swigCPtr.Handle == b.swigCPtr.Handle;
        }

        public static bool operator !=(BaseComponent a, BaseComponent b)
        {
            return !(a == b);
        }

        public override bool Equals(object o)
        {
            return this == o as BaseComponent;
        }

        public override int GetHashCode()
        {
            return swigCPtr.Handle.GetHashCode();
        }
    }

}