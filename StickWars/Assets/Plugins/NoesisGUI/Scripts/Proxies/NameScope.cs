/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class NameScope : BaseComponent {
  private HandleRef swigCPtr;

  public NameScope(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.NameScope_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(NameScope obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~NameScope() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_NameScope(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public NameScope() : this(NoesisGUI_PINVOKE.new_NameScope(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static NameScope GetNameScope(DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.NameScope_GetNameScope(DependencyObject.getCPtr(element));
    NameScope ret = (cPtr == IntPtr.Zero) ? null : new NameScope(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetNameScope(DependencyObject element, NameScope nameScope) {
    NoesisGUI_PINVOKE.NameScope_SetNameScope(DependencyObject.getCPtr(element), NameScope.getCPtr(nameScope));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string FindObject(BaseComponent arg0) {
    string ret = NoesisGUI_PINVOKE.NameScope_FindObject(swigCPtr, BaseComponent.getCPtr(arg0));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }





  public BaseComponent FindName(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.NameScope_FindName(swigCPtr, name);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void RegisterName(string name, BaseComponent arg1) {
    NoesisGUI_PINVOKE.NameScope_RegisterName(swigCPtr, name, BaseComponent.getCPtr(arg1));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UnregisterName(string name) {
    NoesisGUI_PINVOKE.NameScope_UnregisterName(swigCPtr, name);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UpdateName(string name, BaseComponent arg1) {
    NoesisGUI_PINVOKE.NameScope_UpdateName(swigCPtr, name, BaseComponent.getCPtr(arg1));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }







  public static DependencyProperty NameScopeProperty {
    set {
      NoesisGUI_PINVOKE.NameScope_NameScopeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.NameScope_NameScopeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_NameScope(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_NameScope(valPtr);
  }

}

}

