/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class EventTrigger : BaseTrigger {
  private HandleRef swigCPtr;

  public EventTrigger(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.EventTrigger_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(EventTrigger obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventTrigger() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_EventTrigger(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public EventTrigger() : this(NoesisGUI_PINVOKE.new_EventTrigger(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public TriggerActionCollection GetActions() {
    IntPtr cPtr = NoesisGUI_PINVOKE.EventTrigger_GetActions(swigCPtr);
    TriggerActionCollection ret = (cPtr == IntPtr.Zero) ? null : new TriggerActionCollection(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public RoutedEvent GetRoutedEvent() {
    IntPtr cPtr = NoesisGUI_PINVOKE.EventTrigger_GetRoutedEvent(swigCPtr);
    RoutedEvent ret = (cPtr == IntPtr.Zero) ? null : new RoutedEvent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetRoutedEvent(RoutedEvent arg0) {
    NoesisGUI_PINVOKE.EventTrigger_SetRoutedEvent(swigCPtr, RoutedEvent.getCPtr(arg0));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetSourceName() {
    string ret = NoesisGUI_PINVOKE.EventTrigger_GetSourceName(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetSourceName(string name) {
    NoesisGUI_PINVOKE.EventTrigger_SetSourceName(swigCPtr, name);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void AddToLocalTriggers(FrameworkElement target) {
    NoesisGUI_PINVOKE.EventTrigger_AddToLocalTriggers(swigCPtr, FrameworkElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }





  public override void RegisterEvents(FrameworkElement target, FrameworkElement nameScope, bool skipSourceName) {
    NoesisGUI_PINVOKE.EventTrigger_RegisterEvents(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), skipSourceName);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public override void UnregisterEvents(FrameworkElement target, FrameworkElement nameScope, bool skipSourceName) {
    NoesisGUI_PINVOKE.EventTrigger_UnregisterEvents(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), skipSourceName);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public override bool Check(FrameworkElement target, FrameworkElement nameScope, DependencyObject arg2, DependencyProperty dp, bool skipSourceName) {
    bool ret = NoesisGUI_PINVOKE.EventTrigger_Check(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), DependencyObject.getCPtr(arg2), DependencyProperty.getCPtr(dp), skipSourceName);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public override BaseComponent FindValue(FrameworkElement target, FrameworkElement nameScope, DependencyObject arg2, DependencyProperty dp) {
    IntPtr cPtr = NoesisGUI_PINVOKE.EventTrigger_FindValue(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), DependencyObject.getCPtr(arg2), DependencyProperty.getCPtr(dp));
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public override void Invalidate(FrameworkElement target, FrameworkElement nameScope, bool skipSourceName, bool skipTargetName, byte priority) {
    NoesisGUI_PINVOKE.EventTrigger_Invalidate__SWIG_0(swigCPtr, FrameworkElement.getCPtr(target), FrameworkElement.getCPtr(nameScope), skipSourceName, skipTargetName, priority);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_EventTrigger(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_EventTrigger(valPtr);
  }

}

}

