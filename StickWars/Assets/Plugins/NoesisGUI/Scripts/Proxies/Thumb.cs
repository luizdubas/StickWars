/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Thumb : Control {
  private HandleRef swigCPtr;

  public Thumb(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Thumb_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Thumb obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Thumb() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Thumb(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void DragCompletedDelegate(BaseComponent arg0,   DragCompletedEventArgs arg1);
  public event DragCompletedDelegate DragCompleted
  {
    add
    {
      lock (this)
      {
        if (!_DragCompleted.ContainsKey(swigCPtr.Handle))
        {
          _DragCompleted.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Thumb_DragCompleted(RaiseDragCompleted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragCompleted[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragCompleted.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragCompleted[swigCPtr.Handle] -= value;

        if (_DragCompleted[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Thumb_DragCompleted(RaiseDragCompleted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragCompleted.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragCompleted(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragCompleted))]
  private static void RaiseDragCompleted(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragCompleted.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragCompleted[cPtr] != null)
    {
      _DragCompleted[cPtr](new BaseComponent(arg0, false), new   DragCompletedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragCompletedDelegate> _DragCompleted =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragCompletedDelegate>();


  public delegate void DragDeltaDelegate(BaseComponent arg0,   DragDeltaEventArgs arg1);
  public event DragDeltaDelegate DragDelta
  {
    add
    {
      lock (this)
      {
        if (!_DragDelta.ContainsKey(swigCPtr.Handle))
        {
          _DragDelta.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Thumb_DragDelta(RaiseDragDelta, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragDelta[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragDelta.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragDelta[swigCPtr.Handle] -= value;

        if (_DragDelta[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Thumb_DragDelta(RaiseDragDelta, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragDelta.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragDelta(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragDelta))]
  private static void RaiseDragDelta(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragDelta.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragDelta[cPtr] != null)
    {
      _DragDelta[cPtr](new BaseComponent(arg0, false), new   DragDeltaEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragDeltaDelegate> _DragDelta =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragDeltaDelegate>();


  public delegate void DragStartedDelegate(BaseComponent arg0,   DragStartedEventArgs arg1);
  public event DragStartedDelegate DragStarted
  {
    add
    {
      lock (this)
      {
        if (!_DragStarted.ContainsKey(swigCPtr.Handle))
        {
          _DragStarted.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Thumb_DragStarted(RaiseDragStarted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _DragStarted[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_DragStarted.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _DragStarted[swigCPtr.Handle] -= value;

        if (_DragStarted[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Thumb_DragStarted(RaiseDragStarted, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _DragStarted.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseDragStarted(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseDragStarted))]
  private static void RaiseDragStarted(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_DragStarted.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_DragStarted[cPtr] != null)
    {
      _DragStarted[cPtr](new BaseComponent(arg0, false), new   DragStartedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragStartedDelegate> _DragStarted =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragStartedDelegate>();


  public Thumb() : this(NoesisGUI_PINVOKE.new_Thumb(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsDragging() {
    bool ret = NoesisGUI_PINVOKE.Thumb_GetIsDragging(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void CancelDrag() {
    NoesisGUI_PINVOKE.Thumb_CancelDrag(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty IsDraggingProperty {
    set {
      NoesisGUI_PINVOKE.Thumb_IsDraggingProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Thumb_IsDraggingProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_Thumb(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Thumb(valPtr);
  }

}

}

