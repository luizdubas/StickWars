/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ScrollBar : RangeBase {
  private HandleRef swigCPtr;

  public ScrollBar(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.ScrollBar_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ScrollBar obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ScrollBar() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_ScrollBar(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void ScrollDelegate(BaseComponent arg0,   ScrollEventArgs arg1);
  public event ScrollDelegate Scroll
  {
    add
    {
      lock (this)
      {
        if (!_Scroll.ContainsKey(swigCPtr.Handle))
        {
          _Scroll.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ScrollBar_Scroll(RaiseScroll, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Scroll[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Scroll.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Scroll[swigCPtr.Handle] -= value;

        if (_Scroll[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ScrollBar_Scroll(RaiseScroll, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Scroll.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseScroll(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseScroll))]
  private static void RaiseScroll(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Scroll.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Scroll[cPtr] != null)
    {
      _Scroll[cPtr](new BaseComponent(arg0, false), new   ScrollEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ScrollDelegate> _Scroll =
      new System.Collections.Generic.Dictionary<System.IntPtr, ScrollDelegate>();


  public ScrollBar() : this(NoesisGUI_PINVOKE.new_ScrollBar(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Orientation GetOrientation() {
    Orientation ret = (Orientation)NoesisGUI_PINVOKE.ScrollBar_GetOrientation(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetOrientation(Orientation orientation) {
    NoesisGUI_PINVOKE.ScrollBar_SetOrientation(swigCPtr, (int)orientation);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetViewportSize() {
    float ret = NoesisGUI_PINVOKE.ScrollBar_GetViewportSize(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetViewportSize(float size) {
    NoesisGUI_PINVOKE.ScrollBar_SetViewportSize(swigCPtr, size);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Track GetTrack() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_GetTrack(swigCPtr);
    Track ret = (cPtr == IntPtr.Zero) ? null : new Track(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static DependencyProperty OrientationProperty {
    set {
      NoesisGUI_PINVOKE.ScrollBar_OrientationProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_OrientationProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ViewportSizeProperty {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ViewportSizeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ViewportSizeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand DeferScrollToHorizontalOffsetCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_DeferScrollToHorizontalOffsetCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_DeferScrollToHorizontalOffsetCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand DeferScrollToVerticalOffsetCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_DeferScrollToVerticalOffsetCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_DeferScrollToVerticalOffsetCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand LineDownCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_LineDownCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_LineDownCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand LineLeftCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_LineLeftCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_LineLeftCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand LineRightCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_LineRightCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_LineRightCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand LineUpCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_LineUpCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_LineUpCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand PageDownCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_PageDownCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_PageDownCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand PageLeftCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_PageLeftCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_PageLeftCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand PageRightCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_PageRightCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_PageRightCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand PageUpCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_PageUpCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_PageUpCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollHereCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollHereCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollHereCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToBottomCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToBottomCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToBottomCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToEndCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToEndCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToEndCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToHomeCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToHomeCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToHomeCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToHorizontalOffsetCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToHorizontalOffsetCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToHorizontalOffsetCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToLeftEndCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToLeftEndCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToLeftEndCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToRightEndCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToRightEndCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToRightEndCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToTopCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToTopCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToTopCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static RoutedCommand ScrollToVerticalOffsetCommand {
    set {
      NoesisGUI_PINVOKE.ScrollBar_ScrollToVerticalOffsetCommand_set(RoutedCommand.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ScrollBar_ScrollToVerticalOffsetCommand_get();
      RoutedCommand ret = (cPtr == IntPtr.Zero) ? null : new RoutedCommand(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_ScrollBar(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_ScrollBar(valPtr);
  }

}

}

