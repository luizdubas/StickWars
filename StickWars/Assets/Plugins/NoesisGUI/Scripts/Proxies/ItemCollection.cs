/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ItemCollection : BaseComponent {
  private HandleRef swigCPtr;

  public ItemCollection(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.ItemCollection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ItemCollection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ItemCollection() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_ItemCollection(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ItemCollection() : this(NoesisGUI_PINVOKE.new_ItemCollection__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ItemCollection(ItemsControl owner) : this(NoesisGUI_PINVOKE.new_ItemCollection__SWIG_1(ItemsControl.getCPtr(owner)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetItemsControlOwner(ItemsControl owner) {
    NoesisGUI_PINVOKE.ItemCollection_SetItemsControlOwner(swigCPtr, ItemsControl.getCPtr(owner));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void SetView(CollectionView view) {
    NoesisGUI_PINVOKE.ItemCollection_SetView(swigCPtr, CollectionView.getCPtr(view));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsReadOnly() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_IsReadOnly(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool CanFilter() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_CanFilter(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool CanGroup() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_CanGroup(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool CanSort() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_CanSort(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool Contains(BaseComponent item) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_Contains(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseComponent CurrentItem() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemCollection_CurrentItem(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public int CurrentPosition() {
    int ret = NoesisGUI_PINVOKE.ItemCollection_CurrentPosition(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsCurrentAfterLast() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_IsCurrentAfterLast(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsCurrentBeforeFirst() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_IsCurrentBeforeFirst(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsEmpty() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_IsEmpty(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentTo(BaseComponent item) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentTo(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToFirst() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToFirst(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToLast() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToLast(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToNext() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToNext(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPosition(int position) {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToPosition(swigCPtr, position);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPrevious() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_MoveCurrentToPrevious(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Refresh() {
    NoesisGUI_PINVOKE.ItemCollection_Refresh(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public uint Count() {
    uint ret = NoesisGUI_PINVOKE.ItemCollection_Count(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseComponent Get(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemCollection_Get(swigCPtr, index);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Set(uint index, BaseComponent item) {
    NoesisGUI_PINVOKE.ItemCollection_Set__SWIG_0(swigCPtr, index, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Set(uint index, string item) {
    NoesisGUI_PINVOKE.ItemCollection_Set__SWIG_1(swigCPtr, index, item);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public uint Add(BaseComponent item) {
    uint ret = NoesisGUI_PINVOKE.ItemCollection_Add__SWIG_0(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public uint Add(string item) {
    uint ret = NoesisGUI_PINVOKE.ItemCollection_Add__SWIG_1(swigCPtr, item);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Clear() {
    NoesisGUI_PINVOKE.ItemCollection_Clear(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int IndexOf(BaseComponent item) {
    int ret = NoesisGUI_PINVOKE.ItemCollection_IndexOf(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Insert(uint index, BaseComponent item) {
    NoesisGUI_PINVOKE.ItemCollection_Insert__SWIG_0(swigCPtr, index, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Insert(uint index, string item) {
    NoesisGUI_PINVOKE.ItemCollection_Insert__SWIG_1(swigCPtr, index, item);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void Remove(BaseComponent item) {
    NoesisGUI_PINVOKE.ItemCollection_Remove(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void RemoveAt(uint index) {
    NoesisGUI_PINVOKE.ItemCollection_RemoveAt(swigCPtr, index);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }



  public bool IsInitialized() {
    bool ret = NoesisGUI_PINVOKE.ItemCollection_IsInitialized(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Init() {
    NoesisGUI_PINVOKE.ItemCollection_Init(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_ItemCollection(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_ItemCollection(valPtr);
  }

}

}

