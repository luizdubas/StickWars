/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class TreeView : ItemsControl {
  private HandleRef swigCPtr;

  public TreeView(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.TreeView_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TreeView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TreeView() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_TreeView(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TreeView() : this(NoesisGUI_PINVOKE.new_TreeView(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetSelectedItem() {
    IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_GetSelectedItem(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public BaseComponent GetSelectedValue() {
    IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_GetSelectedValue(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public string GetSelectedValuePath() {
    IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_GetSelectedValuePath(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetSelectedValuePath(string value) {
    NoesisGUI_PINVOKE.TreeView_SetSelectedValuePath(swigCPtr, Marshal.StringToHGlobalAnsi(value));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void ItemClicked(TreeViewItem tvi) {
    NoesisGUI_PINVOKE.TreeView_ItemClicked(swigCPtr, TreeViewItem.getCPtr(tvi));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void ItemExpanded(TreeViewItem tvi) {
    NoesisGUI_PINVOKE.TreeView_ItemExpanded(swigCPtr, TreeViewItem.getCPtr(tvi));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty SelectedItemProperty {
    set {
      NoesisGUI_PINVOKE.TreeView_SelectedItemProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedValuePathProperty {
    set {
      NoesisGUI_PINVOKE.TreeView_SelectedValuePathProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedValuePathProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedValueProperty {
    set {
      NoesisGUI_PINVOKE.TreeView_SelectedValueProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedValueProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public delegate void SelectedItemChangedDelegate(BaseComponent oldValue, BaseComponent newValue);
  public event SelectedItemChangedDelegate SelectedItemChanged
  {
    add
    {
      lock(this)
      {
        if (!_SelectedItemChanged.ContainsKey(swigCPtr.Handle))
        {
          _SelectedItemChanged.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_TreeView_SelectedItemChanged(RaiseSelectedItemChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _SelectedItemChanged[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock(this)
      {
        if (!_SelectedItemChanged.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _SelectedItemChanged[swigCPtr.Handle] -= value;

        if (_SelectedItemChanged[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_TreeView_SelectedItemChanged(RaiseSelectedItemChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SelectedItemChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseSelectedItemChanged(IntPtr cPtr, IntPtr oldValue, IntPtr newValue);

  [MonoPInvokeCallback(typeof(DelegateRaiseSelectedItemChanged))]
  private static void RaiseSelectedItemChanged(IntPtr cPtr, IntPtr oldValue, IntPtr newValue)
  {
    if (!_SelectedItemChanged.ContainsKey(cPtr))    {      throw new System.Exception("Delegate not found");    }    if (_SelectedItemChanged[cPtr] != null)
    {
      _SelectedItemChanged[cPtr](new BaseComponent(oldValue, false), new BaseComponent(newValue, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SelectedItemChangedDelegate> _SelectedItemChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SelectedItemChangedDelegate>();

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_TreeView(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_TreeView(valPtr);
  }

}

}

