/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class MenuItem : HeaderedItemsControl {
  private HandleRef swigCPtr;

  public MenuItem(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.MenuItem_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(MenuItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MenuItem() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_MenuItem(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void CheckedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event CheckedDelegate Checked
  {
    add
    {
      lock (this)
      {
        if (!_Checked.ContainsKey(swigCPtr.Handle))
        {
          _Checked.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_MenuItem_Checked(RaiseChecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Checked[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Checked.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Checked[swigCPtr.Handle] -= value;

        if (_Checked[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_MenuItem_Checked(RaiseChecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Checked.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseChecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseChecked))]
  private static void RaiseChecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Checked.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Checked[cPtr] != null)
    {
      _Checked[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, CheckedDelegate> _Checked =
      new System.Collections.Generic.Dictionary<System.IntPtr, CheckedDelegate>();


  public delegate void ClickDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event ClickDelegate Click
  {
    add
    {
      lock (this)
      {
        if (!_Click.ContainsKey(swigCPtr.Handle))
        {
          _Click.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_MenuItem_Click(RaiseClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Click[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Click.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Click[swigCPtr.Handle] -= value;

        if (_Click[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_MenuItem_Click(RaiseClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Click.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseClick))]
  private static void RaiseClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Click.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Click[cPtr] != null)
    {
      _Click[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ClickDelegate> _Click =
      new System.Collections.Generic.Dictionary<System.IntPtr, ClickDelegate>();


  public delegate void SubmenuClosedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event SubmenuClosedDelegate SubmenuClosed
  {
    add
    {
      lock (this)
      {
        if (!_SubmenuClosed.ContainsKey(swigCPtr.Handle))
        {
          _SubmenuClosed.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_MenuItem_SubmenuClosed(RaiseSubmenuClosed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _SubmenuClosed[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_SubmenuClosed.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _SubmenuClosed[swigCPtr.Handle] -= value;

        if (_SubmenuClosed[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_MenuItem_SubmenuClosed(RaiseSubmenuClosed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SubmenuClosed.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseSubmenuClosed(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseSubmenuClosed))]
  private static void RaiseSubmenuClosed(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_SubmenuClosed.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_SubmenuClosed[cPtr] != null)
    {
      _SubmenuClosed[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SubmenuClosedDelegate> _SubmenuClosed =
      new System.Collections.Generic.Dictionary<System.IntPtr, SubmenuClosedDelegate>();


  public delegate void SubmenuOpenedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event SubmenuOpenedDelegate SubmenuOpened
  {
    add
    {
      lock (this)
      {
        if (!_SubmenuOpened.ContainsKey(swigCPtr.Handle))
        {
          _SubmenuOpened.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_MenuItem_SubmenuOpened(RaiseSubmenuOpened, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _SubmenuOpened[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_SubmenuOpened.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _SubmenuOpened[swigCPtr.Handle] -= value;

        if (_SubmenuOpened[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_MenuItem_SubmenuOpened(RaiseSubmenuOpened, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SubmenuOpened.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseSubmenuOpened(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseSubmenuOpened))]
  private static void RaiseSubmenuOpened(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_SubmenuOpened.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_SubmenuOpened[cPtr] != null)
    {
      _SubmenuOpened[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SubmenuOpenedDelegate> _SubmenuOpened =
      new System.Collections.Generic.Dictionary<System.IntPtr, SubmenuOpenedDelegate>();


  public delegate void UncheckedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event UncheckedDelegate Unchecked
  {
    add
    {
      lock (this)
      {
        if (!_Unchecked.ContainsKey(swigCPtr.Handle))
        {
          _Unchecked.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_MenuItem_Unchecked(RaiseUnchecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Unchecked[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Unchecked.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Unchecked[swigCPtr.Handle] -= value;

        if (_Unchecked[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_MenuItem_Unchecked(RaiseUnchecked, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Unchecked.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseUnchecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseUnchecked))]
  private static void RaiseUnchecked(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Unchecked.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Unchecked[cPtr] != null)
    {
      _Unchecked[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, UncheckedDelegate> _Unchecked =
      new System.Collections.Generic.Dictionary<System.IntPtr, UncheckedDelegate>();


  public MenuItem() : this(NoesisGUI_PINVOKE.new_MenuItem(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetCommandParameter() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetCommandParameter(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetCommandParameter(BaseComponent parameter) {
    NoesisGUI_PINVOKE.MenuItem_SetCommandParameter(swigCPtr, BaseComponent.getCPtr(parameter));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }





  public UIElement GetCommandTarget() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetCommandTarget(swigCPtr);
    UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetCommandTarget(UIElement target) {
    NoesisGUI_PINVOKE.MenuItem_SetCommandTarget(swigCPtr, UIElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetIcon() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetIcon(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIcon(BaseComponent icon) {
    NoesisGUI_PINVOKE.MenuItem_SetIcon(swigCPtr, BaseComponent.getCPtr(icon));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetInputGestureText() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetInputGestureText(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetInputGestureText(string text) {
    NoesisGUI_PINVOKE.MenuItem_SetInputGestureText(swigCPtr, Marshal.StringToHGlobalAnsi(text));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsCheckable() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsCheckable(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsCheckable(bool value) {
    NoesisGUI_PINVOKE.MenuItem_SetIsCheckable(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsChecked() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsChecked(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsChecked(bool value) {
    NoesisGUI_PINVOKE.MenuItem_SetIsChecked(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsHighlighted() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsHighlighted(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsPressed() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsPressed(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetIsSubmenuOpen() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsSubmenuOpen(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsSubmenuOpen(bool value) {
    NoesisGUI_PINVOKE.MenuItem_SetIsSubmenuOpen(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsSuspendingPopupAnimation() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetIsSuspendingPopupAnimation(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public MenuItemRole GetRole() {
    MenuItemRole ret = (MenuItemRole)NoesisGUI_PINVOKE.MenuItem_GetRole(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool GetStaysOpenOnClick() {
    bool ret = NoesisGUI_PINVOKE.MenuItem_GetStaysOpenOnClick(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetStaysOpenOnClick(bool value) {
    NoesisGUI_PINVOKE.MenuItem_SetStaysOpenOnClick(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty CommandParameterProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_CommandParameterProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandParameterProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CommandProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_CommandProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CommandTargetProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_CommandTargetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandTargetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IconProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IconProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IconProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty InputGestureTextProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_InputGestureTextProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_InputGestureTextProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsCheckableProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsCheckableProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsCheckableProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsCheckedProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsCheckedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsCheckedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsHighlightedProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsHighlightedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsHighlightedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsPressedProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsPressedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsPressedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSubmenuOpenProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsSubmenuOpenProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsSubmenuOpenProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSuspendingPopupAnimationProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsSuspendingPopupAnimationProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsSuspendingPopupAnimationProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RoleProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_RoleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_RoleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty StaysOpenOnClickProperty {
    set {
      NoesisGUI_PINVOKE.MenuItem_StaysOpenOnClickProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_StaysOpenOnClickProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SeparatorStyleKey {
    set {
      NoesisGUI_PINVOKE.MenuItem_SeparatorStyleKey_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_SeparatorStyleKey_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_MenuItem(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_MenuItem(valPtr);
  }

}

}

