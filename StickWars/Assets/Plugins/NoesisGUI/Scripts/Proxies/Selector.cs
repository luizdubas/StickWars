/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Selector : ItemsControl {
  private HandleRef swigCPtr;

  public Selector(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Selector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(Selector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Selector() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_Selector(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void SelectionChangedDelegate(BaseComponent arg0,   SelectionChangedEventArgs arg1);
  public event SelectionChangedDelegate SelectionChanged
  {
    add
    {
      lock (this)
      {
        if (!_SelectionChanged.ContainsKey(swigCPtr.Handle))
        {
          _SelectionChanged.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_Selector_SelectionChanged(RaiseSelectionChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _SelectionChanged[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_SelectionChanged.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _SelectionChanged[swigCPtr.Handle] -= value;

        if (_SelectionChanged[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_Selector_SelectionChanged(RaiseSelectionChanged, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _SelectionChanged.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseSelectionChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseSelectionChanged))]
  private static void RaiseSelectionChanged(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_SelectionChanged.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_SelectionChanged[cPtr] != null)
    {
      _SelectionChanged[cPtr](new BaseComponent(arg0, false), new   SelectionChangedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SelectionChangedDelegate> _SelectionChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SelectionChangedDelegate>();


  public static bool GetIsSelected(DependencyObject element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelected(DependencyObject.getCPtr(element));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetIsSelected(DependencyObject element, bool value) {
    NoesisGUI_PINVOKE.Selector_SetIsSelected(DependencyObject.getCPtr(element), value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static bool GetIsSelectionActive(UIElement element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelectionActive(UIElement.getCPtr(element));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public System.Nullable<bool> GetIsSynchronizedWithCurrentItem() {
    NullableBool ret = new NullableBool(NoesisGUI_PINVOKE.Selector_GetIsSynchronizedWithCurrentItem(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    System.Nullable<bool> retNullable = null;
    if (ret.HasValue())
    {
      retNullable = ret.GetValue();
    }
    return retNullable;
  }

  public void SetIsSynchronizedWithCurrentItem(System.Nullable<bool> value_) {
    NullableBool value = new NullableBool();
    if (value_.HasValue)
    {
      value.SetValue(value_.Value);
    }

    NoesisGUI_PINVOKE.Selector_SetIsSynchronizedWithCurrentItem(swigCPtr, NullableBool.getCPtr(value));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int GetSelectedIndex() {
    int ret = NoesisGUI_PINVOKE.Selector_GetSelectedIndex(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetSelectedIndex(int index) {
    NoesisGUI_PINVOKE.Selector_SetSelectedIndex(swigCPtr, index);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetSelectedItem() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Selector_GetSelectedItem(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetSelectedItem(BaseComponent item) {
    NoesisGUI_PINVOKE.Selector_SetSelectedItem(swigCPtr, BaseComponent.getCPtr(item));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string GetSelectedValuePath() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Selector_GetSelectedValuePath(swigCPtr);
    NsString nsstring = new NsString(cPtr, false);
    string ret = nsstring.c_str();
    return ret;
}

  public void SetSelectedValuePath(string path) {
    NoesisGUI_PINVOKE.Selector_SetSelectedValuePath(swigCPtr, Marshal.StringToHGlobalAnsi(path));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetSelectedValue() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Selector_GetSelectedValue(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetSelectedValue(BaseComponent value) {
    NoesisGUI_PINVOKE.Selector_SetSelectedValue(swigCPtr, BaseComponent.getCPtr(value));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty IsSelectedProperty {
    set {
      NoesisGUI_PINVOKE.Selector_IsSelectedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSelectionActiveProperty {
    set {
      NoesisGUI_PINVOKE.Selector_IsSelectionActiveProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectionActiveProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSynchronizedWithCurrentItemProperty {
    set {
      NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItemProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedIndexProperty {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedIndexProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedIndexProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedItemProperty {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedItemProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedValuePathProperty {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedValuePathProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedValuePathProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedValueProperty {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedValueProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedValueProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_Selector(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_Selector(valPtr);
  }

}

}

