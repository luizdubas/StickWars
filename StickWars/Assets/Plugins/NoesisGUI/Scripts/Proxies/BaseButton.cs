/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class BaseButton : ContentControl {
  private HandleRef swigCPtr;

  public BaseButton(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.BaseButton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(BaseButton obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseButton() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_BaseButton(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void ClickDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event ClickDelegate Click
  {
    add
    {
      lock (this)
      {
        if (!_Click.ContainsKey(swigCPtr.Handle))
        {
          _Click.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_BaseButton_Click(RaiseClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Click[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Click.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Click[swigCPtr.Handle] -= value;

        if (_Click[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_BaseButton_Click(RaiseClick, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Click.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseClick))]
  private static void RaiseClick(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Click.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Click[cPtr] != null)
    {
      _Click[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ClickDelegate> _Click =
      new System.Collections.Generic.Dictionary<System.IntPtr, ClickDelegate>();


  public ClickMode GetClickMode() {
    ClickMode ret = (ClickMode)NoesisGUI_PINVOKE.BaseButton_GetClickMode(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetClickMode(ClickMode mode) {
    NoesisGUI_PINVOKE.BaseButton_SetClickMode(swigCPtr, (int)mode);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public BaseComponent GetCommandParameter() {
    IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_GetCommandParameter(swigCPtr);
    BaseComponent ret = (cPtr == IntPtr.Zero) ? null : new BaseComponent(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetCommandParameter(BaseComponent param) {
    NoesisGUI_PINVOKE.BaseButton_SetCommandParameter(swigCPtr, BaseComponent.getCPtr(param));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public UIElement GetCommandTarget() {
    IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_GetCommandTarget(swigCPtr);
    UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetCommandTarget(UIElement target) {
    NoesisGUI_PINVOKE.BaseButton_SetCommandTarget(swigCPtr, UIElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsPressed() {
    bool ret = NoesisGUI_PINVOKE.BaseButton_GetIsPressed(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static DependencyProperty ClickModeProperty {
    set {
      NoesisGUI_PINVOKE.BaseButton_ClickModeProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_ClickModeProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CommandProperty {
    set {
      NoesisGUI_PINVOKE.BaseButton_CommandProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_CommandProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CommandParameterProperty {
    set {
      NoesisGUI_PINVOKE.BaseButton_CommandParameterProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_CommandParameterProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty CommandTargetProperty {
    set {
      NoesisGUI_PINVOKE.BaseButton_CommandTargetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_CommandTargetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsPressedProperty {
    set {
      NoesisGUI_PINVOKE.BaseButton_IsPressedProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BaseButton_IsPressedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_BaseButton(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_BaseButton(valPtr);
  }

}

}

