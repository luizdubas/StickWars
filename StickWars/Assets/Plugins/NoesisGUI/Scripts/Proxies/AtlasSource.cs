/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class AtlasSource : ImageSource {
  private HandleRef swigCPtr;

  public AtlasSource(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.AtlasSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(AtlasSource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AtlasSource() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_AtlasSource(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public AtlasSource() : this(NoesisGUI_PINVOKE.new_AtlasSource__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public AtlasSource(ImageAtlasList atlasList, uint index, Recti rect) : this(NoesisGUI_PINVOKE.new_AtlasSource__SWIG_1(ImageAtlasList.getCPtr(atlasList), index, Recti.getCPtr(rect)), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public AtlasSource(ImageAtlasList atlasList, uint index, Recti rect, float dpiX, float dpiY) : this(NoesisGUI_PINVOKE.new_AtlasSource__SWIG_2(ImageAtlasList.getCPtr(atlasList), index, Recti.getCPtr(rect), dpiX, dpiY), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public ImageAtlasList GetAtlasList() {
    IntPtr cPtr = NoesisGUI_PINVOKE.AtlasSource_GetAtlasList(swigCPtr);
    ImageAtlasList ret = (cPtr == IntPtr.Zero) ? null : new ImageAtlasList(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetAtlasList(ImageAtlasList atlasList) {
    NoesisGUI_PINVOKE.AtlasSource_SetAtlasList(swigCPtr, ImageAtlasList.getCPtr(atlasList));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public uint GetAtlasIndex() {
    uint ret = NoesisGUI_PINVOKE.AtlasSource_GetAtlasIndex(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetAtlasIndex(uint index) {
    NoesisGUI_PINVOKE.AtlasSource_SetAtlasIndex(swigCPtr, index);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Recti GetRect() {
    Recti ret = new Recti(NoesisGUI_PINVOKE.AtlasSource_GetRect(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetRect(Recti rect) {
    NoesisGUI_PINVOKE.AtlasSource_SetRect(swigCPtr, Recti.getCPtr(rect));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetDpiX() {
    float ret = NoesisGUI_PINVOKE.AtlasSource_GetDpiX(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDpiX(float dpiX) {
    NoesisGUI_PINVOKE.AtlasSource_SetDpiX(swigCPtr, dpiX);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetDpiY() {
    float ret = NoesisGUI_PINVOKE.AtlasSource_GetDpiY(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetDpiY(float dpiY) {
    NoesisGUI_PINVOKE.AtlasSource_SetDpiY(swigCPtr, dpiY);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public int GetPixelWidth() {
    int ret = NoesisGUI_PINVOKE.AtlasSource_GetPixelWidth(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public int GetPixelHeight() {
    int ret = NoesisGUI_PINVOKE.AtlasSource_GetPixelHeight(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }







  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_AtlasSource(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_AtlasSource(valPtr);
  }

}

}

