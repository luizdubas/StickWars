/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public partial class FrameworkPropertyMetadata : UIPropertyMetadata {
  private HandleRef swigCPtr;

  public FrameworkPropertyMetadata(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.FrameworkPropertyMetadata_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(FrameworkPropertyMetadata obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~FrameworkPropertyMetadata() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_FrameworkPropertyMetadata(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FrameworkPropertyMetadata() : this(NoesisGUI_PINVOKE.new_FrameworkPropertyMetadata__SWIG_0(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public FrameworkPropertyMetadata(int options) : this(NoesisGUI_PINVOKE.new_FrameworkPropertyMetadata__SWIG_1(options), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

















  public bool AffectsMeasure() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_AffectsMeasure(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool AffectsArrange() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_AffectsArrange(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool AffectsParentMeasure() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_AffectsParentMeasure(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool AffectsParentArrange() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_AffectsParentArrange(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool AffectsRender() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_AffectsRender(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool Inherits() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_Inherits(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool OverridesInheritanceBehavior() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_OverridesInheritanceBehavior(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsNotDataBindable() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_IsNotDataBindable(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool BindsTwoWayByDefault() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_BindsTwoWayByDefault(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }



  public bool SubPropertiesDoNotAffectRender() {
    bool ret = NoesisGUI_PINVOKE.FrameworkPropertyMetadata_SubPropertiesDoNotAffectRender(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public override void ClearInheritedValues() {
    NoesisGUI_PINVOKE.FrameworkPropertyMetadata_ClearInheritedValues(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public override void Merge(PropertyMetadata ancestor) {
    NoesisGUI_PINVOKE.FrameworkPropertyMetadata_Merge(swigCPtr, PropertyMetadata.getCPtr(ancestor));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_FrameworkPropertyMetadata(valPtr);
  }

}

}

