/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ContextMenu : BaseMenu {
  private HandleRef swigCPtr;

  public ContextMenu(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.ContextMenu_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ContextMenu obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ContextMenu() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          if (Noesis.Kernel.IsInitialized()) { NoesisGUI_PINVOKE.delete_ContextMenu(swigCPtr);}
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public delegate void ClosedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event ClosedDelegate Closed
  {
    add
    {
      lock (this)
      {
        if (!_Closed.ContainsKey(swigCPtr.Handle))
        {
          _Closed.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ContextMenu_Closed(RaiseClosed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Closed[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Closed.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Closed[swigCPtr.Handle] -= value;

        if (_Closed[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ContextMenu_Closed(RaiseClosed, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Closed.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseClosed(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseClosed))]
  private static void RaiseClosed(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Closed.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Closed[cPtr] != null)
    {
      _Closed[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ClosedDelegate> _Closed =
      new System.Collections.Generic.Dictionary<System.IntPtr, ClosedDelegate>();


  public delegate void OpenedDelegate(BaseComponent arg0,   RoutedEventArgs arg1);
  public event OpenedDelegate Opened
  {
    add
    {
      lock (this)
      {
        if (!_Opened.ContainsKey(swigCPtr.Handle))
        {
          _Opened.Add(swigCPtr.Handle, null);

          NoesisGUI_PINVOKE.BindEvent_ContextMenu_Opened(RaiseOpened, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif
        }

        _Opened[swigCPtr.Handle] += value;
      }
    }
    remove
    {
      lock (this)
      {
        if (!_Opened.ContainsKey(swigCPtr.Handle))
        {
          throw new System.Exception("Delegate not found");
        }

        _Opened[swigCPtr.Handle] -= value;

        if (_Opened[swigCPtr.Handle] == null)
        {
          NoesisGUI_PINVOKE.UnbindEvent_ContextMenu_Opened(RaiseOpened, swigCPtr.Handle);
          #if UNITY_EDITOR
          if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
          #endif

          _Opened.Remove(swigCPtr.Handle);
        }
      }
    }
  }

  public delegate void DelegateRaiseOpened(IntPtr cPtr, IntPtr arg0, IntPtr arg1);

  [MonoPInvokeCallback(typeof(DelegateRaiseOpened))]
  private static void RaiseOpened(IntPtr cPtr, IntPtr arg0, IntPtr arg1)
  {
    if (!_Opened.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }

    if (_Opened[cPtr] != null)
    {
      _Opened[cPtr](new BaseComponent(arg0, false), new   RoutedEventArgs(arg1, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, OpenedDelegate> _Opened =
      new System.Collections.Generic.Dictionary<System.IntPtr, OpenedDelegate>();


  public ContextMenu() : this(NoesisGUI_PINVOKE.new_ContextMenu(), true) {
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public CustomPopupPlacementCallback GetCustomPopupPlacementCallback() {
    CustomPopupPlacementCallback ret = new CustomPopupPlacementCallback(NoesisGUI_PINVOKE.ContextMenu_GetCustomPopupPlacementCallback(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetCustomPopupPlacementCallback(CustomPopupPlacementCallback callback) {
    NoesisGUI_PINVOKE.ContextMenu_SetCustomPopupPlacementCallback(swigCPtr, CustomPopupPlacementCallback.getCPtr(callback));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetHasDropShadow() {
    bool ret = NoesisGUI_PINVOKE.ContextMenu_GetHasDropShadow(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetHasDropShadow(bool value) {
    NoesisGUI_PINVOKE.ContextMenu_SetHasDropShadow(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetHorizontalOffset() {
    float ret = NoesisGUI_PINVOKE.ContextMenu_GetHorizontalOffset(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetHorizontalOffset(float value) {
    NoesisGUI_PINVOKE.ContextMenu_SetHorizontalOffset(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetIsOpen() {
    bool ret = NoesisGUI_PINVOKE.ContextMenu_GetIsOpen(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetIsOpen(bool value) {
    NoesisGUI_PINVOKE.ContextMenu_SetIsOpen(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public PlacementMode GetPlacement() {
    PlacementMode ret = (PlacementMode)NoesisGUI_PINVOKE.ContextMenu_GetPlacement(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetPlacement(PlacementMode mode) {
    NoesisGUI_PINVOKE.ContextMenu_SetPlacement(swigCPtr, (int)mode);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Rect GetPlacementRectangle() {
    Rect ret = new Rect(NoesisGUI_PINVOKE.ContextMenu_GetPlacementRectangle(swigCPtr), false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetPlacementRectangle(Rect rect) {
    NoesisGUI_PINVOKE.ContextMenu_SetPlacementRectangle(swigCPtr, Rect.getCPtr(rect));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public UIElement GetPlacementTarget() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_GetPlacementTarget(swigCPtr);
    UIElement ret = (cPtr == IntPtr.Zero) ? null : new UIElement(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetPlacementTarget(UIElement target) {
    NoesisGUI_PINVOKE.ContextMenu_SetPlacementTarget(swigCPtr, UIElement.getCPtr(target));
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool GetStaysOpen() {
    bool ret = NoesisGUI_PINVOKE.ContextMenu_GetStaysOpen(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetStaysOpen(bool value) {
    NoesisGUI_PINVOKE.ContextMenu_SetStaysOpen(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetVerticalOffset() {
    float ret = NoesisGUI_PINVOKE.ContextMenu_GetVerticalOffset(swigCPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void SetVerticalOffset(float value) {
    NoesisGUI_PINVOKE.ContextMenu_SetVerticalOffset(swigCPtr, value);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Popup GetPopup() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_GetPopup(swigCPtr);
    Popup ret = (cPtr == IntPtr.Zero) ? null : new Popup(cPtr, false);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static DependencyProperty CustomPopupPlacementCallbackProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_CustomPopupPlacementCallbackProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_CustomPopupPlacementCallbackProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty HasDropShadowProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_HasDropShadowProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_HasDropShadowProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty HorizontalOffsetProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_HorizontalOffsetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_HorizontalOffsetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsOpenProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_IsOpenProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_IsOpenProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty PlacementProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_PlacementProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_PlacementProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty PlacementRectangleProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_PlacementRectangleProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_PlacementRectangleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty PlacementTargetProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_PlacementTargetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_PlacementTargetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty StaysOpenProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_StaysOpenProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_StaysOpenProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty VerticalOffsetProperty {
    set {
      NoesisGUI_PINVOKE.ContextMenu_VerticalOffsetProperty_set(DependencyProperty.getCPtr(value));
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ContextMenu_VerticalOffsetProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public new static void Extend(System.Type type) {
    IntPtr typeClassPtr = Noesis.Extend.GetPtrForType(type);
    NoesisGUI_PINVOKE.Extend_ContextMenu(typeClassPtr);
    #if UNITY_EDITOR
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public new static bool CheckType(BaseComponent val) {
    IntPtr valPtr = BaseComponent.getCPtr(val).Handle;
    return NoesisGUI_PINVOKE.CheckType_ContextMenu(valPtr);
  }

}

}

